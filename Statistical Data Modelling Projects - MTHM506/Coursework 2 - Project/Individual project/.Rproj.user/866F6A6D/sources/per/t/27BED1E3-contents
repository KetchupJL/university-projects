---
title: "MTHM506 - Statistical Data Modelling: Individual Project"
author: "James R Lewis"
date: "March 2025"
output:
  html_document:
    css: style.css
    toc: true
    toc_depth: 2
    number_sections: true
  pdf_document:
    latex_engine: xelatex
    toc: true
    toc_depth: 2
    number_sections: true
    keep_tex: true
    includes:
      in_header: preamble.tex
    extra_dependencies: ["amsmath", "amssymb", "mathtools", "bm", "caption", "hyperref", "geometry", "setspace"]
  word_document:
    toc: true
    toc_depth: 2
    number_sections: true
header-includes:
  - \usepackage{geometry}
  - \geometry{a4paper, margin=1in}
  - \usepackage{lscape}
  - \usepackage{setspace}
  - \onehalfspacing
  - \usepackage{parskip}          # Adds space between paragraphs for readability
  - \setlength{\parindent}{0pt}   # Removes paragraph indentation for a cleaner look
  - \hypersetup{colorlinks=true, linkcolor=blue, urlcolor=blue, citecolor=blue} # Consistent link colours in PDF
knitr:
  opts_chunk:
    cache: false
    echo: true
    message: false
    warning: false
classoption: a4paper,11pt
fontsize: 11pt
link-citations: yes
---

```{r loading datasets and libraries, include=FALSE}
load("~/GitHub/university-projects/Statistical Data Modelling Projects - MTHM506/Coursework 2 - Project/datasets_project.RData")
TBdata <- TBdata

library(tidyverse)
library(ggplot2)
library(rmarkdown)
library(mgcv)
library(dplyr)
library(gt)
```

**Declaration of AI Assistance**: I have used OpenAIâ€™s ChatGPT tool in creating this report.

AI-supported/AI-integrated use is permitted in this assessment. I acknowledge the following uses of GenAI tools in this assessment:

1.  I have used GenAI tools to check and debug my code.
2.  I have used GenAI tools to proofread and correct grammar or spelling errors.
3.  I have used GenAI tools to give me feedback on a draft.

I declare that I have referenced use of GenAI outputs within my assessment in line with the University referencing guidelines.

```{r setting plot theme, include = FALSE}
custom_theme <- theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Centered title
    axis.title = element_text(face = "bold", size = 12),
    axis.text = element_text(size = 11), 
    panel.grid.major = element_line(color = "gray85"),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8)
  )
```

\newpage

\newpage

# Appendix {.unnumbered}

This appendix contains all figures, tables, and model outputs referenced in the main report. Each item is clearly labelled and may be cited using cross-references (e.g., see Figure \@ref(fig:scatter-covariates)).

## [References:]{.underline}

\newpage

## A.1 Summary Statistics Table {#tbl:summary-stats}

**Table A.1**: Summary statistics of socio-economic covariates and TB Rate per 100,000 population.

```{r appendix-table-1-summary-stats, echo=FALSE}
# [Table A.1] Summary stats of covariates + TB Rate

TBdata$TB_Rate <- (TBdata$TB/TBdata$Population)*100000

# List of variables and their brief descriptions
covariate_labels <- c(
  "Indigenous",
  "Illiteracy",
  "Urbanisation",
  "Density",
  "Poverty",
  "Poor Sanitation",
  "Unemployment",
  "Timeliness",
  "TB Rate"
)

# Variables for summarisation
variables <- c("Indigenous", "Illiteracy", "Urbanisation", "Density", 
               "Poverty", "Poor_Sanitation", "Unemployment", "Timeliness", "TB_Rate")

# Summarising with explicit naming
summary_stats <- TBdata %>%
  summarise(across(all_of(variables), list(
    Mean = ~mean(.x, na.rm = TRUE),
    SD = ~sd(.x, na.rm = TRUE),
    Min = ~min(.x, na.rm = TRUE),
    Q1 = ~quantile(.x, 0.25, na.rm = TRUE),
    Median = ~median(.x, na.rm = TRUE),
    Q3 = ~quantile(.x, 0.75, na.rm = TRUE),
    Max = ~max(.x, na.rm = TRUE)
  ), .names = "{.col}__{.fn}")) %>%
  pivot_longer(cols = everything(),
               names_to = c("Variable", "Statistic"),
               names_sep = "__",
               values_to = "Value") %>%
  pivot_wider(names_from = Statistic, values_from = Value) %>%
  mutate(Variable = covariate_labels)

# Create the professional GT table
summary_stats %>%
  gt() %>%
  tab_header(
    title = md("**Summary Statistics of Socio-Economic Covariates and TB Rate**")
  ) %>%
  fmt_number(columns = where(is.numeric), decimals = 2) %>%
  cols_label(
    Variable = "Covariate",
    Mean = "Mean",
    SD = "Std Dev",
    Min = "Min",
    Q1 = "25th Percentile",
    Median = "Median",
    Q3 = "75th Percentile",
    Max = "Max"
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(everything())
  ) %>%
  tab_style(
    style = list(cell_fill(color = "gray95")),
    locations = cells_body(rows = Variable == "TB Rate (Cases per 100,000 population)")
  ) %>%
  tab_options(
    table.font.names = "Times New Roman",
    table.font.size = 13,  # Slightly larger text for better readability
    heading.align = "center",
    column_labels.font.size = 13,  # Increase column header size
    column_labels.font.weight = "bold",
    row.striping.include_table_body = TRUE,
    data_row.padding = px(10),  # Increase row padding for more height
    column_labels.border.top.width = px(3),
    column_labels.border.bottom.width = px(3),
    table.border.top.width = px(2),
    table.border.bottom.width = px(2),
    table.border.bottom.color = "black",
    table.border.top.color = "black",
    table.width = pct(100)
  ) %>%
tab_caption("Table 1: Summary Statistics of Socio-Economic Covariates and TB Rate")

```

## A.2 Covariate vs TB Rate Scatterplots {#fig:scatter-covariates}

**Figure A.1**: Not included but wasnt used for analysis. Faceted scatterplots showing the relationship between each socio-economic covariate and the TB Rate.

```{r}
# This isnt included as a plot, but was very informative in displaying the distribution of data for each covariate, and the mean line

# Convert data to long format for faceted plotting
TBdata_long <- TBdata %>%
  pivot_longer(cols = c(Indigenous, Illiteracy, Urbanisation, Density, 
                        Poverty, Poor_Sanitation, Unemployment, Timeliness),
               names_to = "Covariate",
               values_to = "Value")

# Facet labels
facet_labels <- c(
  Indigenous = "Indigenous (%)",
  Illiteracy = "Illiteracy (%)",
  Urbanisation = "Urbanisation (%)",
  Density = "Dwelling Density (Dwellers/Room)",
  Poverty = "Poverty (%)",
  Poor_Sanitation = "Poor Sanitation (Higher = Worse)",
  Unemployment = "Unemployment (%)",
  Timeliness = "TB Notification Delay (Days)"
)

# Faceted Plot
ggplot(TBdata_long, aes(x = Value, y = TB_Rate)) +
  geom_point(alpha = 0.4, color = "darkblue") +  # Scatterplot points
  geom_smooth(method = "loess", color = "red", se = FALSE) +  # Smoothed trend line
  facet_wrap(~ Covariate, scales = "free_x", labeller = labeller(Covariate = facet_labels), nrow = 4, ncol = 2) + 
  labs(title = "Relationship Between Socio-Economic Covariates and TB Rate",
       x = "Covariate Value",
       y = "TB Rate per 100,000") +
  custom_theme+
  theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
        strip.text = element_text(size = 16, face = "bold") 
  )
```

## A.3 Initial Model Checks {#sec:initial-checks}

-   Check for overdispersion
-   First GAM specification
-   Use of tensor smooths and exploratory edf

```{r}
# Initial Model Fitting (GAMs)

# Checking for overdispersion:
observed_var <- var(TBdata$TB)
expected_var <- mean(TBdata$TB)
dispersion <- observed_var / expected_var
print(dispersion)
```

```{r First Model, results='hide'}
library(mgcv)
set.seed(123)
# Fit the Negative Binomial GAM with population offset. Base Model
TBdata$Year <- factor(TBdata$Year)
TBdata$Region <- factor(TBdata$Region)

TBdata$logPop <- log(TBdata$Population)

# Ensure categorical variables are factors
TBdata$fYear <- factor(TBdata$Year)


# First GAM model
gam_model_initial <- gam(TB ~ 
                   s(Indigenous, bs = "tp", k=10) +
                   s(Illiteracy, bs = "tp", k=10) +
                   s(Urbanisation, bs = "tp", k=10) +
                   s(Density, bs = "tp", k=10) +
                   s(Poverty, bs = "cr", k=5) +
                   s(Unemployment, bs = "cr", k=5) +
                   s(Poor_Sanitation, k = 10, bs = "cr") +
                   s(Timeliness, bs = "tp", k=10) +
                   te(lon, lat, by = Year, bs = c("tp", "cr"), k = c(20, 20, 5)) +
                   offset(logPop),
                 data = TBdata, 
                 family = nb(link = "log"), 
                 method = "REML")

# Used a mix of "cr" and "tp" splines. CR on the covariates with mostly linear trends, as this smooth function is better on them.

par(mfrow = c(2,2))
gam.check(gam_model_initial)

summary(gam_model_initial)

# Removing Illiteracy from future models as it inst a significant predictor. 
# Indigenous edf is around 1, meaning the covariate has a linear trend. Thus a smooth function isn't needed for this.
```

## A.4 Final Model: Negative Binomial {#sec:final-nb}

Summary and results for final GAM with NB family. Includes choice of smooths and rationale.

```{R Final nb model, results='hide'}
# Final Negative Binomial GAM with linear/smooth terms

set.seed(123)
gam_model <- gam(TB ~ 
                   Year + 
                   Indigenous + # edf value of 1.002, since is more ore less linear, we dont need smoothing term
                   s(Urbanisation) +
                   s(Density) +
                   s(Unemployment) +
                   s(Poor_Sanitation) +
                   s(Poverty) +
                   s(Timeliness) +
                   s(lon,lat, k = 30) +
                 offset(logPop),
                 data = TBdata, 
                 family = nb(link = "log"), 
                 method = "REML",
                 select=TRUE) # Reference to book page 406, this is used as "reduced tendency to under-smooth"

# plot(gam_model, pages = 1, all.terms = TRUE, shade = TRUE)
summary(gam_model)
k.check(gam_model)

# par(mfrow = c(2,2))
# gam.check(gam_model)

```

## A.5 Final Model: Tweedie Family {#sec:final-tweedie}

Includes model diagnostics and fitted predictions.

```{R Final Base model, }
# Final Tweedie GAM model
set.seed(123)
gam_model_tw <- gam(TB ~ 
                   Year + 
                   Indigenous + 
                   s(Urbanisation) +
                   s(Density) +
                   s(Unemployment) +
                   s(Poor_Sanitation) +
                   s(Poverty) +
                   s(Timeliness) +
                   s(lon,lat) +
                   offset(logPop),
                 data = TBdata, 
                 family = tw, 
                 method = "REML",
                 select=TRUE)

k.check(gam_model_tw)
summary(gam_model_tw)
# plot(gam_model_tw, pages = 1, all.terms = TRUE, shade = TRUE)

# Generate predicted TB cases from the GAM
TBdata$predicted_cases <- predict(gam_model_tw, type = "response")

# Convert to TB rate per 100,000 population
TBdata$predicted_rate <- (TBdata$predicted_cases / TBdata$Population) * 100000

```

## A.6 GAM with Temporal Smooths {#sec:temporal}

Model incorporating smooths by year (`s(..., by = Year)`) to examine changing effects.

```{r Model with temporal terms, results='hide'}
# GAM with Temporal/Spatial

gam_model_SP <- gam(TB ~ Year +
                      s(Indigenous, by = Year) +
                      s(Illiteracy, by = Year) +
                      s(Urbanisation, by = Year) +
                      s(Density, by = Year) +
                      s(Unemployment, by = Year) +
                      s(Poor_Sanitation, by = Year) +
                      s(Poverty, by = Year) +
                      s(Timeliness, by = Year) +
                      s(lon,lat, by = Year) +
                      offset(logPop),
                    data = TBdata, 
                    family = tw, 
                    method = "REML",
                    select=TRUE)

summary(gam_model_SP)
# plot(gam_model_SP, pages = 1, all.terms = TRUE, shade = TRUE)
```

```{r, results='hide'}
# AIC tests
AIC(gam_model)
AIC(gam_model_tw)
AIC(gam_model_SP)
```

## A.7 Model Comparison Table {#tbl:model-comparison}

**Table A.2**: Comparison between NB, Tweedie, and temporal GAMs using AIC and deviance explained.

```{r Table 2, echo = FALSE, message=FALSE, fig.width=10, fig.height=14, dpi=300,fig.cap="Comparison of GAM Models"}
# GT table comparing NB, Tweedie, and spatio-temporal GAMs


library(gt)
library(tidyverse)

# Data preparation
model_comparison <- data.frame(
  Model = c("Tweedie", "Negative Binomial", "Tweedie (Temporal Terms)"),
  Family = c("Tweedie(p=1.666)", "NB(Î¸=8.336)", "Tweedie(p=1.688)"),
  Adj_R2 = c(0.902, 0.846, 0.871),
  Deviance_Explained = c("59.7%", "56.6%", "57.3%"),
  REML = c(7123, 7068, 7225),
  Scale_Estimate = c(0.575, 1.00, 0.570),
  AIC = c(14120, 14023, 14325)
)

model_comparison %>%
  gt() %>%
  tab_header(
    title = md("**Comparison of GAM Models**"),
    subtitle = "Tweedie vs Negative Binomial vs Tweedie with Temporal Terms"
  ) %>%
  cols_label(
    Adj_R2 = md("Adjusted RÂ²")
  ) %>%
  fmt_number(columns = c(Adj_R2, Scale_Estimate), decimals = 3) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(everything())
  ) %>%
  tab_footnote(
    footnote = "Lower AIC values indicate better model fit.",
    locations = cells_column_labels(columns = AIC)
  ) %>%
  tab_options(
    table.font.names = "Times New Roman",
    table.font.size = 13,
    heading.align = "center",
    column_labels.font.size = 13,
    column_labels.font.weight = "bold",
    data_row.padding = px(10),
    row.striping.include_table_body = TRUE,
    column_labels.border.top.width = px(3),
    column_labels.border.bottom.width = px(3),
    table.border.top.width = px(2),
    table.border.bottom.width = px(2),
    table.border.bottom.color = "black",
    table.border.top.color = "black",
    table.width = pct(100)
  ) %>%
  tab_caption("Table 2: Comparison of GAM Models")
```

## A.8 Diagnostic Plots {#fig:diagnostics}

**Figure A.2**: QQ plot and deviance residuals from the final Tweedie model.

```{r Plot 1, echo = FALSE, message=FALSE, fig.cap="QQ Plot + deviance residuals"}
## Check residuals
par(mfrow=c(1,2))
# QQplot
qq.gam(gam_model_tw,pch=20)
# deviance residualsvs linearpredictor
xx <-gam_model_tw$linear.predictors
yy <-residuals(gam_model_tw,type="deviance")
14
plot(xx,yy,pch=20,xlab="Linear predictor",ylab="Deviance residuals")
abline(h=0)
```

## A.9 Observed vs Fitted Plot {#fig:obs-vs-fitted}

**Figure A.3**: Scatterplot comparing observed and fitted TB Rates.

```{r Observed vs Fitted, echo = FALSE, message=FALSE, dpi=300,fig.cap="Observed vs Fitted"}
obs_fit_plot <- ggplot(TBdata, aes(x = predicted_rate, y = TB_rate)) +
  geom_point(alpha = 0.6, colour = "steelblue") +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "black", linewidth = 0.7) +
  labs(
    title = "Observed vs Fitted TB Rates per Microregion",
    x = "Fitted TB Rate (per 100,000)",
    y = "Observed TB Rate (per 100,000)"
  ) +
  theme_bw(base_size = 13) +
  theme(
    plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10),
    panel.grid.major = element_line(size = 0.3, colour = "grey90"),
    panel.grid.minor = element_blank()
  )
```

## A.10 Smooth Effects of Covariates {#fig:smooth-effects}

**Figure A.4**: Estimated smooth functions with 95% CIs for each covariate (Tweedie model).

```{r results='hide'}
# Smooth terms from Tweedie GAM

# Extract smooth terms from the GAM model (gam_model_tw)
smooth_terms <- plot(gam_model_tw, pages = 1, all.terms = TRUE, shade = TRUE, seWithMean = TRUE)

# Data frame to store all covariates smooth predictions
smooth_plot_data <- map_dfr(1:length(smooth_terms), function(i) {
  data.frame(
    Covariate = smooth_terms[[i]]$xlab,
    x = smooth_terms[[i]]$x,
    fit = smooth_terms[[i]]$fit,
    se = smooth_terms[[i]]$se
  )
})

# Compute confidence intervals
smooth_plot_data <- smooth_plot_data %>%
  mutate(lower_CI = fit - 1.96 * se,
         upper_CI = fit + 1.96 * se)

# Define clear and informative facet labels
facet_labels <- c(
  "s(Urbanisation)" = "Urbanisation (%)",
  "s(Density)" = "Dwelling Density (Dwellers/Room)",
  "s(Unemployment)" = "Unemployment (%)",
  "s(Poor_Sanitation)" = "Poor Sanitation (Higher = Worse)",
  "s(Poverty)" = "Poverty (%)",
  "s(Timeliness)" = "TB Notification Delay (Days)",
  "s(lon,lat)" = "Spatial Effect (Longitude & Latitude)"
)

# Filter out the 2-dimensional smooth (lon,lat), which needs separate treatment
smooth_plot_data_filtered <- smooth_plot_data %>%
  filter(Covariate != "s(lon,lat)")
```

```{r Figure-2, echo = FALSE, message=FALSE, fig.cap="Relationship Between Socio-Economic Covariates and TB Rate per 100,000 Population."}
# Plot using ggplot
ggplot(smooth_plot_data_filtered, aes(x = x, y = fit)) +
  geom_line(color = "darkblue", linewidth = 1.2) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  geom_ribbon(aes(ymin = lower_CI, ymax = upper_CI), alpha = 0.3, fill = "blue") +
  facet_wrap(~ Covariate, scales = "free_x", labeller = labeller(Covariate = facet_labels), nrow = 4, ncol = 2) +
  labs(title = "Partial Effects of Socio-Economic Covariates on TB Risk",
       subtitle = "Estimated smooth terms with 95% confidence intervals",
       x = "Covariate Value",
       y = "Partial Effect (log-scale)",
       caption = "Positive values indicate increased risk; negative values indicate decreased risk.") +
  theme_bw(base_size = 14) +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 14, hjust = 0.5),
    strip.text = element_text(size = 16, face = "bold"),
    axis.title = element_text(size = 14),
    panel.spacing = unit(1, "lines")
  )
```

## A.11 Spatial Structure of TB Risk {#fig:spatial-map}

**Figure A.5**: Map of predicted TB Risk across microregions, using spatial smooths.

```{r}
# Spatial visualisation of TB risk


plot.map <- function(x, Q, main = "", cex = 1, decimals = 2, palette = rev(hcl.colors(length(Q)-1, palette = "inferno"))) {
  n.levels <- length(Q) - 1
  cols <- palette  # directly use provided palette (already a vector of colours)
  n <- length(x)
  
  # Assign colours based on quantiles
  col <- rep(cols[1], n)
  for(i in 2:n.levels) {
    col[x >= Q[i] & x < Q[i + 1]] <- cols[i]
  }
  col[x >= Q[n.levels + 1]] <- cols[n.levels]
  
  # Format legend with clear control over decimal points
  legend.names <- c()
  for(i in 1:n.levels) {
    legend.names[i] <- paste0("[", round(Q[i], decimals), ", ", round(Q[i + 1], decimals), "]")
  }
  
  # Plotting clearly
  plot(brasil_micro, col = col, main = main, border = NA)
  legend('bottomright', legend = legend.names, fill = cols, cex = cex, title = "TB Rate")
}


# Generate predicted TB cases from the GAM
TBdata$predicted_cases <- predict(gam_model_tw, type = "response")

# Convert to TB rate per 100,000 population
TBdata$predicted_rate <- (TBdata$predicted_cases / TBdata$Population) * 100000

# Define quantiles clearly for legend (7 levels)
quantiles <- quantile(TBdata$predicted_rate, probs = seq(0, 1, length.out = 10))

# Define inverted inferno palette explicitly
my_palette <- rev(hcl.colors(length(quantiles)-1, palette = "inferno"))

# Plot with smaller legend size clearly
plot.map(x = TBdata$predicted_rate,
         Q = quantiles,
         main = "Spatial Structure of Predicted TB Risk (per 100,000 population)",
         cex = 1, 
         decimals = 2,
         palette = my_palette)

```

## A.12 Temporal Changes in Effects {#fig:temporal-effects}

**Figure A.6**: Line plots showing covariate effects over time.

```{r}
# Temporal smooths across years using wrap_plots()


library(patchwork)
library(scales)
library(stringr)

# Colour scheme
year_colours <- c(
  "2012" = "#D55E00",  # burnt orange
  "2013" = "#0072B2",  # deep blue
  "2014" = "#009E73"   # teal green
)

# Covariate labels
label_cleaner <- function(x) {
  x %>% str_replace_all("_", " ") %>% str_to_title()
}

library(gratia)

# Extract smooth estimates from the GAM
smooth_df <- smooth_estimates(gam_model_SP)

# Filter out spatial and illiteracy terms
filtered_df <- smooth_df %>%
  filter(
    !str_detect(.smooth, "Illiteracy"),
    !str_detect(.smooth, "lon")
  ) %>%
  mutate(
    covariate = str_extract(.smooth, "(?<=s\\().+?(?=\\))"),   # extract covariate name
    year = str_extract(.smooth, "\\d{4}")                      # extract year from label
  )


# Plot list, Using a for loop to so we cal do them all at once.
plot_list <- list()
unique_covs <- unique(filtered_df$covariate)

for (cov in unique_covs) {
  df_sub <- filtered_df %>% filter(covariate == cov)
  
  p <- ggplot(df_sub, aes_string(x = cov, y = ".estimate", colour = "year")) +
    geom_line(linewidth = 1) +
    geom_hline(yintercept = 0, linetype = "dashed", colour = "grey40", linewidth = 0.4) +
    scale_colour_manual(values = year_colours) +
    labs(
      x = label_cleaner(cov),
      y = NULL
    ) +
    theme_bw(base_size = 12) +
    theme(
      plot.title = element_blank(),
      axis.title.x = element_text(size = 11),
      axis.text = element_text(size = 10),
      panel.grid.major = element_line(size = 0.2),
      panel.grid.minor = element_blank(),
      legend.position = "none"
    )
  
  plot_list[[cov]] <- p
}


# Plot Layout - Shared Legend
combined_plot <- wrap_plots(plot_list, ncol = 2) +
  plot_layout(guides = "collect") &
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(size = 11),
    plot.margin = margin(10, 10, 10, 10)
  )

# Adding Figure Title
 combined_plot +
  plot_annotation(
    title = "Temporal Variation in Socio-Economic Covariate Effects on TB Risk",
    theme = theme(
      plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
    )
  )
```

## A.13 Yearly Risk Maps {#fig:yearly-maps}

**Figure A.7**: Separate maps for 2012â€“2014 displaying spatial risk variation.

```{r}
# Maps for each year

# Predicting TB rates
TBdata$predicted_cases_sp <- predict(gam_model_SP, type = "response")

# Convert to TB rate per 100,000 population
TBdata$predicted_rate_sp <- (TBdata$predicted_cases_sp / TBdata$Population) * 100000

par(mfrow = c(3, 1))  # Arrange plots side by side for comparison

years <- c("2012", "2013", "2014")

# Define common quantiles for all years to keep the scale consistent
quantiles <- quantile(TBdata$predicted_rate_sp, probs = seq(0, 1, length.out = 8), na.rm = TRUE)

# Loop through each year and plot it clearly
for (year in years) {
  
  plot.map(
    x = TBdata$predicted_rate_sp[TBdata$Year == year],  # Filter TB rates for the year
    Q = quantiles,
    main = paste("Predicted TB Risk (per 100,000) - Year", year),
    cex = 1, 
    decimals = 2,
    palette = my_palette  # Uses the same colour scheme for all years
  )
}
```

## A.14 High-Risk Region Table {#tbl:high-risk}

**Table A.3**: Regions identified as high-risk using fixed (40 per 100k) and dynamic thresholds.

```{r}
# Table showing high-risk regions by fixed and dynamic thresholds

# Recreating the data, so not affect original dataset
TBdata_new <- TBdata %>%
  dplyr::select(Region, Year, Indigenous, Illiteracy, Urbanisation, 
                Density, Poverty, Poor_Sanitation, Unemployment, Population, Timeliness, lon, lat, logPop) %>%
  mutate(Predicted_TB = predict(gam_model_tw, newdata = ., type = "response"),
         Predicted_TB_Scaled = (Predicted_TB / Population) * 100000)  # Scale to per 100,000 population

# Compute Dynamic Threshold (Top 10% Each Year)
high_risk_threshold <- TBdata_new %>%
  group_by(Year) %>%
  summarise(Dynamic_Threshold = quantile(Predicted_TB_Scaled, 0.90, na.rm = TRUE), .groups = "drop")

# Define Fixed Threshold
fixed_threshold <- 40  # Fixed high-risk threshold (40 per 100,000)

# Count High-Risk Regions Exceeding Fixed Threshold
high_risk_regions_fixed <- TBdata_new %>%
  filter(Predicted_TB_Scaled > fixed_threshold) %>%
  group_by(Year) %>%
  summarise(Total_High_Risk_Regions = n(), .groups = "drop")

# Identify the 3 Highest-Risk Regions Each Year
top_high_risk_regions <- TBdata_new %>%
  group_by(Year) %>%
  arrange(desc(Predicted_TB_Scaled)) %>%
  slice_head(n = 3) %>%
  summarise(Highest_Risk_Regions = paste(Region, collapse = ", "), .groups = "drop")

# Merge Data into a Single Table
high_risk_summary <- high_risk_regions_fixed %>%
  left_join(high_risk_threshold, by = "Year") %>%
  left_join(top_high_risk_regions, by = "Year") %>%
  mutate(Dynamic_Threshold = round(Dynamic_Threshold, 2))  # Round for readability

# Formatting GT table
high_risk_summary %>%
  gt() %>%
  tab_header(
    title = md("**High-Risk TB Regions Over Time**"),
    subtitle = "Regions exceeding fixed and dynamic TB rate thresholds"
  ) %>%
  fmt_number(columns = c(Total_High_Risk_Regions, Dynamic_Threshold), decimals = 2) %>%
  cols_label(
    Year = "Year",
    Total_High_Risk_Regions = "Regions Above Fixed Threshold (40 per 100k)",
    Dynamic_Threshold = "Top 10% Threshold",
    Highest_Risk_Regions = "Top 3 Highest-Risk Regions"
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(everything())
  ) %>%
  tab_options(
    table.font.size = 13,
    column_labels.font.size = 13,
    column_labels.font.weight = "bold",
    heading.align = "center",
    row.striping.include_table_body = TRUE,
    data_row.padding = px(10),
    table.border.top.width = px(2),
    table.border.bottom.width = px(2),
    table.border.bottom.color = "black",
    table.border.top.color = "black",
    table.width = pct(100)
  ) %>%
  tab_caption("Table: Summary of High-Risk TB Regions Over Time")

```
