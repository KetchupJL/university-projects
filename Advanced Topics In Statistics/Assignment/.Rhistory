facet_wrap(~ PersonID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# 7. Display plots
print(p1)
print(p2)
View(rtimes_long)
# Reshaping to long format
rtimes_long <- rtimes %>%
pivot_longer(cols = starts_with("T"),  # Columns T1 to T30
names_to = "Trial",
values_to = "ReactionTime") %>%
mutate(PatientID = rep(1:17, each = 30)) %>%  # Add person identifier
select(PatientID, PatientType, ReactionTime)  # Keep relevant columns
# Renaming first column
names(rtimes)[1] <- "PatientType"
# Classifying the patient type, 1-11 non-schiz, 12-17 schiz
rtimes$patient_type <- c(rep("non-schizophrenic", 11), rep("schizophrenic", 6))
head(rtimes)
# Renaming first column
names(rtimes)[1] <- "PatientType"
# Classifying the patient type, 1-11 non-schiz, 12-17 schiz
rtimes$PatientType <- c(rep("non-schizophrenic", 11), rep("schizophrenic", 6))
head(rtimes)
DataValues <- unlist(rtimes[, 2:31])
range(DataValues)
# We want to store these values
x_min <- 204
x_max <- 1714
# Reshaping to long format
rtimes_long <- rtimes %>%
pivot_longer(cols = starts_with("T"),  # Columns T1 to T30
names_to = "Trial",
values_to = "ReactionTime") %>%
mutate(PatientID = rep(1:17, each = 30)) %>%  # Add person identifier
select(PatientID, PatientType, ReactionTime)  # Keep relevant columns
# Splitting into two datasets
non_schizo <- rtimes_long %>% filter(PatientType == "non-schizophrenic")  # 11 people
schizo <- rtimes_long %>% filter(PatientType == "schizophrenic")          # 6 people
# Plotting non-schizophrenic histograms
p1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "lightblue", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
p2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "salmon", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
print(p1)
print(p2)
# Reshaping to long format
rtimes_long <- rtimes %>%
pivot_longer(cols = starts_with("T"),  # Columns T1 to T30
names_to = "Trial",
values_to = "ReactionTime") %>%
mutate(PatientID = rep(1:17, each = 30)) %>%  # Add person identifier
select(PatientID, PatientType, ReactionTime)  # Keep relevant columns
# Splitting into two datasets
non_schizo <- rtimes_long %>% filter(PatientType == "non-schizophrenic")  # 11 people
schizo <- rtimes_long %>% filter(PatientType == "schizophrenic")          # 6 people
# Plotting non-schizophrenic histograms
p1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "lightblue", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
p2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "salmon", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
print(p1)
print(p2)
# Reshaping to long format
rtimes_long <- rtimes %>%
pivot_longer(cols = starts_with("T"),  # Columns T1 to T30
names_to = "Trial",
values_to = "ReactionTime") %>%
mutate(PatientID = rep(1:17, each = 30)) %>%  # Add person identifier
select(PatientID, PatientType, ReactionTime)  # Keep relevant columns
# Splitting into two datasets
non_schizo <- rtimes_long %>% filter(PatientType == "non-schizophrenic")  # 11 people
schizo <- rtimes_long %>% filter(PatientType == "schizophrenic")          # 6 people
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "lightblue", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 1: Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "salmon", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 2: Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
print(hist1)
print(hist2)
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "lightblue", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 1: Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "salmon", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 2: Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
print(hist1)
print(hist2)
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "lightblue", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 1: Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "salmon", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 2: Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
print(hist1)
print(hist2)
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "lightblue", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 1: Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "salmon", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 2: Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
print(hist1)
print(hist2)
log_rtimes <- log(rtimes[, 2:31])
log_rtimes <- log(rtimes[, 2:31])
range(log_rtimes)
log_rtimes <- log(rtimes[, 2:31])
range(log_rtimes) # checking the range also lets us know if any observations are negative.
View(log_rtimes)
# Renaming first column
names(rtimes)[1] <- "PatientType"
# Classifying the patient type, 1-11 non-schiz, 12-17 schiz
rtimes$PatientType <- c(rep("non-schizophrenic", 11), rep("schizophrenic", 6))
head(rtimes)
DataValues <- unlist(rtimes[, 2:31])
range(DataValues)
# We want to store these values
x_min <- 204
x_max <- 1714
log_rtimes <- log(rtimes[, 2:31])
range(log_rtimes) # checking the range also lets us know if any observations are negative.
# Renaming first column
names(rtimes)[1] <- "PatientType"
# Classifying the patient type, 1-11 non-schiz, 12-17 schiz
rtimes$PatientType <- c(rep("non-schizophrenic", 11), rep("schizophrenic", 6))
rtimes1 <- rtimes
head(rtimes1)
log_rtimes <- log(rtimes1[, 2:31])
range(log_rtimes) # checking the range also lets us know if any observations are negative.
View(rtimes1)
View(log_rtimes)
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes) # checking the range also lets us know if any observations are negative.
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes) # checking the range also lets us know if any observations are negative.
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes) # checking the range also lets us know if any observations are negative.
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes) # checking the range also lets us know if any observations are negative.
View(log_rtimes_long)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes) # checking the range also lets us know if any observations are negative.
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes_long) # checking the range also lets us know if any observations are negative.
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes_long) # checking the range also lets us know if any observations are negative.
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(ReactionTime$log_rtimes_long) # checking the range also lets us know if any observations are negative.
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(LogReactionTime$log_rtimes_long) # checking the range also lets us know if any observations are negative.
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(LogReactionTime$log_rtimes_long) # checking the range also lets us know if any observations are negative.
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(SD_Log_RT)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(SD_Log_RT)
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(SD_Log_RT)
range(LogReactionTime$log_rtimes_long) # checking the range also lets us know if any observations are negative.
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(LogReactionTime$log_rtimes_long) # checking the range also lets us know if any observations are negative.
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes_long$LogReactionTime) # checking the range also lets us know if any observations are negative.
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(SD_Log_RT)
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes_long$LogReactionTime) # checking the range also lets us know if any observations are negative.
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(SD_Log_RT)
View(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(sd_log$SD_Log_RT)
# Print results
view(SD_Log_RT)
# Print results
view(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
view(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
view(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log)
# Print results
head(sd_log) + tail(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log) + tail(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log)
?head
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log,6,3 )
?head
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log, n =6,3 )
?head
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log, n =[6,3] )
# Print results
head(sd_log,n=[6,3])
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log,n=c(6,3))
?head
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log,n=17)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log)
alpha[i] ~ dunif(-10, 10)
mu ~ dunif(-10, 10)
beta ~ dunif(-10, 10)
sigma_y ~ dunif(0, 10)  # Or 1/sigma_y ~ dunif(0, 10) for precision
sigma_alpha ~ dunif(0, 10)
tau ~ dunif(0, 10)
lambda ~ dunif(0, 1)
alpha[i] ~ dunif(-10, 10)
mu ~ dunif(-10, 10)
beta ~ dunif(-10, 10)
sigma_y ~ dunif(0, 10)  # Or 1/sigma_y ~ dunif(0, 10) for precision
sigma_alpha ~ dunif(0, 10)
tau ~ dunif(0, 10)
lambda ~ dunif(0, 1)
log(0.2)
log(1.8)
log(200)
log(1)
log(1.6)
log(1800)
log(200)
log(100)
mu ~ dunif(0, 10)
log(50)
log(0.5)
log(3)
log(0.001)
View(log_rtimes)
View(log_rtimes_long)
View(log_rtimes)
View(rtimes_long)
# Reshaping to long format
rtimes_long <- rtimes1 %>%
pivot_longer(cols = starts_with("T"),  # Columns T1 to T30
names_to = "Trial",
values_to = "ReactionTime") %>%
mutate(PatientID = rep(1:17, each = 30)) %>%  # Add patientID
select(PatientID, PatientType, ReactionTime)
# Splitting into two datasets so I can have seperate histogramws
non_schizo <- rtimes_long %>% filter(PatientType == "non-schizophrenic")
schizo <- rtimes_long %>% filter(PatientType == "schizophrenic")
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "dodgerblue2", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 1: Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "sienna2", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 2: Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
print(hist1)
print(hist2)
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "dodgerblue1", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 1: Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "sienna2", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 2: Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
print(hist1)
print(hist2)
print(hist1)
print(hist2)
# Reshaping to long format
rtimes_long <- rtimes1 %>%
pivot_longer(cols = starts_with("T"),  # Columns T1 to T30
names_to = "Trial",
values_to = "ReactionTime") %>%
mutate(PatientID = rep(1:17, each = 30)) %>%  # Add patientID
select(PatientID, PatientType, ReactionTime)
# Splitting into two datasets so I can have seperate histogramws
non_schizo <- rtimes_long %>% filter(PatientType == "non-schizophrenic")
schizo <- rtimes_long %>% filter(PatientType == "schizophrenic")
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "dodgerblue1", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 1: Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "sienna2", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 2: Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(patchwork)
# Plot observed cases and model predictions
plot11 <- ggplot() +
geom_point(data = aids, aes(x = date_proper, y = cases), alpha = 0.3,
color = "black") +
geom_line(data = prediction_data, aes(x = date_proper, y = fit_model1),
color = "blue") +
geom_ribbon(data = prediction_data, aes(x = date_proper, ymin = lower_model1,
ymax = upper_model1),
fill = "blue", alpha = 0.2) +
labs(x = "Date", y = "Cases", title = "Poisson") +
custom_theme
ggplot(aids, aes(x = fitted_nb, y = residuals_nb)) +
geom_point(alpha = 0.8, color = "black") +
geom_smooth(method = "loess", color = "red", se = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black") +
labs(x = "Fitted Values", y = "Deviance Residuals", title = "Figure 8: Negative Binomial Cubic: Deviance Residuals vs. Fitted Values") +
custom_theme
knitr::opts_chunk$set(echo = TRUE)
load("~/GitHub/university-projects/Statistical Data Modelling Projects - MTHM506/Coursework 1 - Practical Modelling Excersises and Theoretical Problems/.RData")
