column_labels.border.bottom.width = px(3),
table.border.top.width = px(2),
table.border.bottom.width = px(2),
table.border.bottom.color = "black",
table.border.top.color = "black",
table.width = pct(100)
) %>%
tab_caption("Table 1: Summary Statistics of Socio-Economic Covariates and TB Rate")
# This isnt included as a plot, but was very informative in displaying the distribution of data for each covariate, and the mean line
# Convert data to long format for faceted plotting
TBdata_long <- TBdata %>%
pivot_longer(cols = c(Indigenous, Illiteracy, Urbanisation, Density,
Poverty, Poor_Sanitation, Unemployment, Timeliness),
names_to = "Covariate",
values_to = "Value")
# Facet labels
facet_labels <- c(
Indigenous = "Indigenous (%)",
Illiteracy = "Illiteracy (%)",
Urbanisation = "Urbanisation (%)",
Density = "Dwelling Density (Dwellers/Room)",
Poverty = "Poverty (%)",
Poor_Sanitation = "Poor Sanitation (Higher = Worse)",
Unemployment = "Unemployment (%)",
Timeliness = "TB Notification Delay (Days)"
)
# Faceted Plot
ggplot(TBdata_long, aes(x = Value, y = TB_Rate)) +
geom_point(alpha = 0.4, color = "darkblue") +  # Scatterplot points
geom_smooth(method = "loess", color = "red", se = FALSE) +  # Smoothed trend line
facet_wrap(~ Covariate, scales = "free_x", labeller = labeller(Covariate = facet_labels), nrow = 4, ncol = 2) +
labs(title = "Relationship Between Socio-Economic Covariates and TB Rate",
x = "Covariate Value",
y = "TB Rate per 100,000") +
custom_theme+
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
strip.text = element_text(size = 16, face = "bold")
)
# Initial Model Fitting (GAMs)
# Checking for overdispersion:
observed_var <- var(TBdata$TB)
expected_var <- mean(TBdata$TB)
dispersion <- observed_var / expected_var
print(dispersion)
library(mgcv)
set.seed(123)
# Fit the Negative Binomial GAM with population offset. Base Model
TBdata$Year <- factor(TBdata$Year)
TBdata$Region <- factor(TBdata$Region)
TBdata$logPop <- log(TBdata$Population)
# Ensure categorical variables are factors
TBdata$fYear <- factor(TBdata$Year)
# First GAM model
gam_model_initial <- gam(TB ~
s(Indigenous, bs = "tp", k=10) +
s(Illiteracy, bs = "tp", k=10) +
s(Urbanisation, bs = "tp", k=10) +
s(Density, bs = "tp", k=10) +
s(Poverty, bs = "cr", k=5) +
s(Unemployment, bs = "cr", k=5) +
s(Poor_Sanitation, k = 10, bs = "cr") +
s(Timeliness, bs = "tp", k=10) +
te(lon, lat, by = Year, bs = c("tp", "cr"), k = c(20, 20, 5)) +
offset(logPop),
data = TBdata,
family = nb(link = "log"),
method = "REML")
# Used a mix of "cr" and "tp" splines. CR on the covariates with mostly linear trends, as this smooth function is better on them.
par(mfrow = c(2,2))
gam.check(gam_model_initial)
summary(gam_model_initial)
# Removing Illiteracy from future models as it inst a significant predictor.
# Indigenous edf is around 1, meaning the covariate has a linear trend. Thus a smooth function isn't needed for this.
# Final Negative Binomial GAM with linear/smooth terms
set.seed(123)
gam_model <- gam(TB ~
Year +
Indigenous + # edf value of 1.002, since is more ore less linear, we dont need smoothing term
s(Urbanisation) +
s(Density) +
s(Unemployment) +
s(Poor_Sanitation) +
s(Poverty) +
s(Timeliness) +
s(lon,lat, k = 30) +
offset(logPop),
data = TBdata,
family = nb(link = "log"),
method = "REML",
select=TRUE) # Reference to book page 406, this is used as "reduced tendency to under-smooth"
# plot(gam_model, pages = 1, all.terms = TRUE, shade = TRUE)
summary(gam_model)
k.check(gam_model)
par(mfrow = c(2,2))
gam.check(gam_model)
# Final Tweedie GAM model
set.seed(123)
gam_model_tw <- gam(TB ~
Year +
Indigenous +
s(Urbanisation) +
s(Density) +
s(Unemployment) +
s(Poor_Sanitation) +
s(Poverty) +
s(Timeliness) +
s(lon,lat) +
offset(logPop),
data = TBdata,
family = tw,
method = "REML",
select=TRUE)
k.check(gam_model_tw)
summary(gam_model_tw)
# plot(gam_model_tw, pages = 1, all.terms = TRUE, shade = TRUE)
# Generate predicted TB cases from the GAM
TBdata$predicted_cases <- predict(gam_model_tw, type = "response")
# Convert to TB rate per 100,000 population
TBdata$predicted_rate <- (TBdata$predicted_cases / TBdata$Population) * 100000
# GAM with Temporal/Spatial
gam_model_SP <- gam(TB ~ Year +
s(Indigenous, by = Year) +
s(Illiteracy, by = Year) +
s(Urbanisation, by = Year) +
s(Density, by = Year) +
s(Unemployment, by = Year) +
s(Poor_Sanitation, by = Year) +
s(Poverty, by = Year) +
s(Timeliness, by = Year) +
s(lon,lat, by = Year) +
offset(logPop),
data = TBdata,
family = tw,
method = "REML",
select=TRUE)
summary(gam_model_SP)
# plot(gam_model_SP, pages = 1, all.terms = TRUE, shade = TRUE)
# AIC tests
AIC(gam_model)
AIC(gam_model_tw)
AIC(gam_model_SP)
# GT table comparing NB, Tweedie, and spatio-temporal GAMs
library(gt)
library(tidyverse)
# Data preparation
model_comparison <- data.frame(
Model = c("Tweedie", "Negative Binomial", "Tweedie (Temporal Terms)"),
Family = c("Tweedie(p=1.666)", "NB(θ=8.336)", "Tweedie(p=1.688)"),
Adj_R2 = c(0.902, 0.846, 0.871),
Deviance_Explained = c("59.7%", "56.6%", "57.3%"),
REML = c(7123, 7068, 7225),
Scale_Estimate = c(0.575, 1.00, 0.570),
AIC = c(14120, 14023, 14325)
)
model_comparison %>%
gt() %>%
tab_header(
title = md("**Comparison of GAM Models**"),
subtitle = "Tweedie vs Negative Binomial vs Tweedie with Temporal Terms"
) %>%
cols_label(
Adj_R2 = md("Adjusted R²")
) %>%
fmt_number(columns = c(Adj_R2, Scale_Estimate), decimals = 3) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels(everything())
) %>%
tab_footnote(
footnote = "Lower AIC values indicate better model fit.",
locations = cells_column_labels(columns = AIC)
) %>%
tab_options(
table.font.names = "Times New Roman",
table.font.size = 13,
heading.align = "center",
column_labels.font.size = 13,
column_labels.font.weight = "bold",
data_row.padding = px(10),
row.striping.include_table_body = TRUE,
column_labels.border.top.width = px(3),
column_labels.border.bottom.width = px(3),
table.border.top.width = px(2),
table.border.bottom.width = px(2),
table.border.bottom.color = "black",
table.border.top.color = "black",
table.width = pct(100)
) %>%
tab_caption("Table 2: Comparison of GAM Models")
## Check residuals
par(mfrow=c(1,2))
# QQplot
qq.gam(gam_model_tw,pch=20)
# deviance residualsvs linearpredictor
xx <-gam_model_tw$linear.predictors
yy <-residuals(gam_model_tw,type="deviance")
14
plot(xx,yy,pch=20,xlab="Linear predictor",ylab="Deviance residuals")
abline(h=0)
obs_fit_plot <- ggplot(TBdata, aes(x = predicted_rate, y = TB_rate)) +
geom_point(alpha = 0.6, colour = "steelblue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", colour = "black", linewidth = 0.7) +
labs(
title = "Observed vs Fitted TB Rates per Microregion",
x = "Fitted TB Rate (per 100,000)",
y = "Observed TB Rate (per 100,000)"
) +
theme_bw(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.grid.major = element_line(size = 0.3, colour = "grey90"),
panel.grid.minor = element_blank()
)
# Smooth terms from Tweedie GAM
# Extract smooth terms from the GAM model (gam_model_tw)
smooth_terms <- plot(gam_model_tw, pages = 1, all.terms = TRUE, shade = TRUE, seWithMean = TRUE)
# Data frame to store all covariates smooth predictions
smooth_plot_data <- map_dfr(1:length(smooth_terms), function(i) {
data.frame(
Covariate = smooth_terms[[i]]$xlab,
x = smooth_terms[[i]]$x,
fit = smooth_terms[[i]]$fit,
se = smooth_terms[[i]]$se
)
})
# Compute confidence intervals
smooth_plot_data <- smooth_plot_data %>%
mutate(lower_CI = fit - 1.96 * se,
upper_CI = fit + 1.96 * se)
# Define clear and informative facet labels
facet_labels <- c(
"s(Urbanisation)" = "Urbanisation (%)",
"s(Density)" = "Dwelling Density (Dwellers/Room)",
"s(Unemployment)" = "Unemployment (%)",
"s(Poor_Sanitation)" = "Poor Sanitation (Higher = Worse)",
"s(Poverty)" = "Poverty (%)",
"s(Timeliness)" = "TB Notification Delay (Days)",
"s(lon,lat)" = "Spatial Effect (Longitude & Latitude)"
)
# Filter out the 2-dimensional smooth (lon,lat), which needs separate treatment
smooth_plot_data_filtered <- smooth_plot_data %>%
filter(Covariate != "s(lon,lat)")
# Plot using ggplot
ggplot(smooth_plot_data_filtered, aes(x = x, y = fit)) +
geom_line(color = "darkblue", linewidth = 1.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_ribbon(aes(ymin = lower_CI, ymax = upper_CI), alpha = 0.3, fill = "blue") +
facet_wrap(~ Covariate, scales = "free_x", labeller = labeller(Covariate = facet_labels), nrow = 4, ncol = 2) +
labs(title = "Partial Effects of Socio-Economic Covariates on TB Risk",
subtitle = "Estimated smooth terms with 95% confidence intervals",
x = "Covariate Value",
y = "Partial Effect (log-scale)",
caption = "Positive values indicate increased risk; negative values indicate decreased risk.") +
theme_bw(base_size = 14) +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
strip.text = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
panel.spacing = unit(1, "lines")
)
# Spatial visualisation of TB risk
plot.map <- function(x, Q, main = "", cex = 1, decimals = 2, palette = rev(hcl.colors(length(Q)-1, palette = "inferno"))) {
n.levels <- length(Q) - 1
cols <- palette  # directly use provided palette (already a vector of colours)
n <- length(x)
# Assign colours based on quantiles
col <- rep(cols[1], n)
for(i in 2:n.levels) {
col[x >= Q[i] & x < Q[i + 1]] <- cols[i]
}
col[x >= Q[n.levels + 1]] <- cols[n.levels]
# Format legend with clear control over decimal points
legend.names <- c()
for(i in 1:n.levels) {
legend.names[i] <- paste0("[", round(Q[i], decimals), ", ", round(Q[i + 1], decimals), "]")
}
# Plotting clearly
plot(brasil_micro, col = col, main = main, border = NA)
legend('bottomright', legend = legend.names, fill = cols, cex = cex, title = "TB Rate")
}
# Generate predicted TB cases from the GAM
TBdata$predicted_cases <- predict(gam_model_tw, type = "response")
# Convert to TB rate per 100,000 population
TBdata$predicted_rate <- (TBdata$predicted_cases / TBdata$Population) * 100000
# Define quantiles clearly for legend (7 levels)
quantiles <- quantile(TBdata$predicted_rate, probs = seq(0, 1, length.out = 10))
# Define inverted inferno palette explicitly
my_palette <- rev(hcl.colors(length(quantiles)-1, palette = "inferno"))
# Plot with smaller legend size clearly
plot.map(x = TBdata$predicted_rate,
Q = quantiles,
main = "Spatial Structure of Predicted TB Risk (per 100,000 population)",
cex = 1,
decimals = 2,
palette = my_palette)
# Table showing high-risk regions by fixed and dynamic thresholds
# Recreating the data, so not affect original dataset
TBdata_new <- TBdata %>%
dplyr::select(Region, Year, Indigenous, Illiteracy, Urbanisation,
Density, Poverty, Poor_Sanitation, Unemployment, Population, Timeliness, lon, lat) %>%
mutate(Predicted_TB = predict(gam_model_tw, newdata = ., type = "response"),
Predicted_TB_Scaled = (Predicted_TB / Population) * 100000)  # Scale to per 100,000 population
# Table showing high-risk regions by fixed and dynamic thresholds
# Recreating the data, so not affect original dataset
TBdata_new <- TBdata %>%
dplyr::select(Region, Year, Indigenous, Illiteracy, Urbanisation,
Density, Poverty, Poor_Sanitation, Unemployment, Population, Timeliness, lon, lat, logPop) %>%
mutate(Predicted_TB = predict(gam_model_tw, newdata = ., type = "response"),
Predicted_TB_Scaled = (Predicted_TB / Population) * 100000)  # Scale to per 100,000 population
# Compute Dynamic Threshold (Top 10% Each Year)
high_risk_threshold <- TBdata_new %>%
group_by(Year) %>%
summarise(Dynamic_Threshold = quantile(Predicted_TB_Scaled, 0.90, na.rm = TRUE), .groups = "drop")
# Define Fixed Threshold
fixed_threshold <- 40  # Fixed high-risk threshold (40 per 100,000)
# Count High-Risk Regions Exceeding Fixed Threshold
high_risk_regions_fixed <- TBdata_new %>%
filter(Predicted_TB_Scaled > fixed_threshold) %>%
group_by(Year) %>%
summarise(Total_High_Risk_Regions = n(), .groups = "drop")
# Identify the 3 Highest-Risk Regions Each Year
top_high_risk_regions <- TBdata_new %>%
group_by(Year) %>%
arrange(desc(Predicted_TB_Scaled)) %>%
slice_head(n = 3) %>%
summarise(Highest_Risk_Regions = paste(Region, collapse = ", "), .groups = "drop")
# Merge Data into a Single Table
high_risk_summary <- high_risk_regions_fixed %>%
left_join(high_risk_threshold, by = "Year") %>%
left_join(top_high_risk_regions, by = "Year") %>%
mutate(Dynamic_Threshold = round(Dynamic_Threshold, 2))  # Round for readability
# Formatting GT table
high_risk_summary %>%
gt() %>%
tab_header(
title = md("**High-Risk TB Regions Over Time**"),
subtitle = "Regions exceeding fixed and dynamic TB rate thresholds"
) %>%
fmt_number(columns = c(Total_High_Risk_Regions, Dynamic_Threshold), decimals = 2) %>%
cols_label(
Year = "Year",
Total_High_Risk_Regions = "Regions Above Fixed Threshold (40 per 100k)",
Dynamic_Threshold = "Top 10% Threshold",
Highest_Risk_Regions = "Top 3 Highest-Risk Regions"
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels(everything())
) %>%
tab_options(
table.font.size = 13,
column_labels.font.size = 13,
column_labels.font.weight = "bold",
heading.align = "center",
row.striping.include_table_body = TRUE,
data_row.padding = px(10),
table.border.top.width = px(2),
table.border.bottom.width = px(2),
table.border.bottom.color = "black",
table.border.top.color = "black",
table.width = pct(100)
) %>%
tab_caption("Table: Summary of High-Risk TB Regions Over Time")
high_risk_summary %>%
gt() %>%
tab_header(
title = md("**High-Risk TB Regions Over Time**"),
subtitle = "Regions exceeding fixed and dynamic TB rate thresholds"
) %>%
fmt_number(columns = c(Total_High_Risk_Regions, Dynamic_Threshold), decimals = 2) %>%
cols_label(
Year = "Year",
Total_High_Risk_Regions = "Regions Above Fixed Threshold (40 per 100k)",
Dynamic_Threshold = "Top 10% Threshold",
Highest_Risk_Regions = "Top 3 Highest-Risk Regions"
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels(everything())
) %>%
tab_options(
table.font.size = 13,
column_labels.font.size = 13,
column_labels.font.weight = "bold",
heading.align = "center",
row.striping.include_table_body = TRUE,
data_row.padding = px(10),
table.border.top.width = px(2),
table.border.bottom.width = px(2),
table.border.bottom.color = "black",
table.border.top.color = "black",
table.width = pct(100)
) %>%
tab_caption("Table: Summary of High-Risk TB Regions Over Time")
# Table showing high-risk regions by fixed and dynamic thresholds
# Recreating the data, so not affect original dataset
TBdata_new <- TBdata %>%
dplyr::select(Region, Year, Indigenous, Illiteracy, Urbanisation,
Density, Poverty, Poor_Sanitation, Unemployment, Population, Timeliness, lon, lat, logPop) %>%
mutate(Predicted_TB = predict(gam_model_tw, newdata = ., type = "response"),
Predicted_TB_Scaled = (Predicted_TB / Population) * 100000)  # Scale to per 100,000 population
# Compute Dynamic Threshold (Top 10% Each Year)
high_risk_threshold <- TBdata_new %>%
group_by(Year) %>%
summarise(Dynamic_Threshold = quantile(Predicted_TB_Scaled, 0.90, na.rm = TRUE), .groups = "drop")
# Define Fixed Threshold
fixed_threshold <- 40  # Fixed high-risk threshold (40 per 100,000)
# Count High-Risk Regions Exceeding Fixed Threshold
high_risk_regions_fixed <- TBdata_new %>%
filter(Predicted_TB_Scaled > fixed_threshold) %>%
group_by(Year) %>%
summarise(Total_High_Risk_Regions = n(), .groups = "drop")
# Identify the 3 Highest-Risk Regions Each Year
top_high_risk_regions <- TBdata_new %>%
group_by(Year) %>%
arrange(desc(Predicted_TB_Scaled)) %>%
slice_head(n = 3) %>%
summarise(Highest_Risk_Regions = paste(Region, collapse = ", "), .groups = "drop")
# Merge Data into a Single Table
high_risk_summary <- high_risk_regions_fixed %>%
left_join(high_risk_threshold, by = "Year") %>%
left_join(top_high_risk_regions, by = "Year") %>%
mutate(Dynamic_Threshold = round(Dynamic_Threshold, 2))  # Round for readability
# Formatting GT table
high_risk_summary %>%
gt() %>%
tab_header(
title = md("**High-Risk TB Regions Over Time**"),
subtitle = "Regions exceeding fixed and dynamic TB rate thresholds"
) %>%
fmt_number(columns = c(Total_High_Risk_Regions, Dynamic_Threshold), decimals = 2) %>%
cols_label(
Year = "Year",
Total_High_Risk_Regions = "Regions Above Fixed Threshold (40 per 100k)",
Dynamic_Threshold = "Top 10% Threshold",
Highest_Risk_Regions = "Top 3 Highest-Risk Regions"
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels(everything())
) %>%
tab_options(
table.font.size = 13,
column_labels.font.size = 13,
column_labels.font.weight = "bold",
heading.align = "center",
row.striping.include_table_body = TRUE,
data_row.padding = px(10),
table.border.top.width = px(2),
table.border.bottom.width = px(2),
table.border.bottom.color = "black",
table.border.top.color = "black",
table.width = pct(100)
) %>%
tab_caption("Table: Summary of High-Risk TB Regions Over Time")
# Spatial visualisation of TB risk
plot.map <- function(x, Q, main = "", cex = 1, decimals = 2, palette = rev(hcl.colors(length(Q)-1, palette = "inferno"))) {
n.levels <- length(Q) - 1
cols <- palette  # directly use provided palette (already a vector of colours)
n <- length(x)
# Assign colours based on quantiles
col <- rep(cols[1], n)
for(i in 2:n.levels) {
col[x >= Q[i] & x < Q[i + 1]] <- cols[i]
}
col[x >= Q[n.levels + 1]] <- cols[n.levels]
# Format legend with clear control over decimal points
legend.names <- c()
for(i in 1:n.levels) {
legend.names[i] <- paste0("[", round(Q[i], decimals), ", ", round(Q[i + 1], decimals), "]")
}
# Plotting clearly
plot(brasil_micro, col = col, main = main, border = NA)
legend('bottomright', legend = legend.names, fill = cols, cex = cex, title = "TB Rate")
}
# Generate predicted TB cases from the GAM
TBdata$predicted_cases <- predict(gam_model_tw, type = "response")
# Convert to TB rate per 100,000 population
TBdata$predicted_rate <- (TBdata$predicted_cases / TBdata$Population) * 100000
# Define quantiles clearly for legend (7 levels)
quantiles <- quantile(TBdata$predicted_rate, probs = seq(0, 1, length.out = 10))
# Define inverted inferno palette explicitly
my_palette <- rev(hcl.colors(length(quantiles)-1, palette = "inferno"))
# Plot with smaller legend size clearly
plot.map(x = TBdata$predicted_rate,
Q = quantiles,
main = "Spatial Structure of Predicted TB Risk (per 100,000 population)",
cex = 1,
decimals = 2,
palette = my_palette)
# Plot using ggplot
ggplot(smooth_plot_data_filtered, aes(x = x, y = fit)) +
geom_line(color = "darkblue", linewidth = 1.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_ribbon(aes(ymin = lower_CI, ymax = upper_CI), alpha = 0.3, fill = "blue") +
facet_wrap(~ Covariate, scales = "free_x", labeller = labeller(Covariate = facet_labels), nrow = 4, ncol = 2) +
labs(title = "Partial Effects of Socio-Economic Covariates on TB Risk",
subtitle = "Estimated smooth terms with 95% confidence intervals",
x = "Covariate Value",
y = "Partial Effect (log-scale)",
caption = "Positive values indicate increased risk; negative values indicate decreased risk.") +
theme_bw(base_size = 14) +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
strip.text = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
panel.spacing = unit(1, "lines")
)
