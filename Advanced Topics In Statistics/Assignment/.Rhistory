range(log_rtimes_long$LogReactionTime) # checking the range also lets us know if any observations are negative.
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(SD_Log_RT)
log_rtimes_long <- rtimes_long %>%
mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes_long$LogReactionTime) # checking the range also lets us know if any observations are negative.
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(SD_Log_RT)
View(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(sd_log$SD_Log_RT)
# Print results
view(SD_Log_RT)
# Print results
view(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
view(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
view(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
print(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log)
# Print results
head(sd_log) + tail(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log) + tail(sd_log)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log)
?head
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log,6,3 )
?head
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log, n =6,3 )
?head
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log, n =[6,3] )
# Print results
head(sd_log,n=[6,3])
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log,n=c(6,3))
?head
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log,n=17)
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
group_by(PatientID) %>%
summarise(SD_Log_RT = sd(LogReactionTime))
# Print results
head(sd_log)
alpha[i] ~ dunif(-10, 10)
mu ~ dunif(-10, 10)
beta ~ dunif(-10, 10)
sigma_y ~ dunif(0, 10)  # Or 1/sigma_y ~ dunif(0, 10) for precision
sigma_alpha ~ dunif(0, 10)
tau ~ dunif(0, 10)
lambda ~ dunif(0, 1)
alpha[i] ~ dunif(-10, 10)
mu ~ dunif(-10, 10)
beta ~ dunif(-10, 10)
sigma_y ~ dunif(0, 10)  # Or 1/sigma_y ~ dunif(0, 10) for precision
sigma_alpha ~ dunif(0, 10)
tau ~ dunif(0, 10)
lambda ~ dunif(0, 1)
log(0.2)
log(1.8)
log(200)
log(1)
log(1.6)
log(1800)
log(200)
log(100)
mu ~ dunif(0, 10)
log(50)
log(0.5)
log(3)
log(0.001)
View(log_rtimes)
View(log_rtimes_long)
View(log_rtimes)
View(rtimes_long)
# Reshaping to long format
rtimes_long <- rtimes1 %>%
pivot_longer(cols = starts_with("T"),  # Columns T1 to T30
names_to = "Trial",
values_to = "ReactionTime") %>%
mutate(PatientID = rep(1:17, each = 30)) %>%  # Add patientID
select(PatientID, PatientType, ReactionTime)
# Splitting into two datasets so I can have seperate histogramws
non_schizo <- rtimes_long %>% filter(PatientType == "non-schizophrenic")
schizo <- rtimes_long %>% filter(PatientType == "schizophrenic")
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "dodgerblue2", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 1: Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "sienna2", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 2: Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
print(hist1)
print(hist2)
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "dodgerblue1", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 1: Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "sienna2", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 2: Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
print(hist1)
print(hist2)
print(hist1)
print(hist2)
# Reshaping to long format
rtimes_long <- rtimes1 %>%
pivot_longer(cols = starts_with("T"),  # Columns T1 to T30
names_to = "Trial",
values_to = "ReactionTime") %>%
mutate(PatientID = rep(1:17, each = 30)) %>%  # Add patientID
select(PatientID, PatientType, ReactionTime)
# Splitting into two datasets so I can have seperate histogramws
non_schizo <- rtimes_long %>% filter(PatientType == "non-schizophrenic")
schizo <- rtimes_long %>% filter(PatientType == "schizophrenic")
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "dodgerblue1", color = "black") +
facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 1: Non-Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
geom_histogram(binwidth = 150, fill = "sienna2", color = "black") +
facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
labs(title = "Figure 2: Schizophrenic Reaction Times",
x = "Reaction Time (ms)",
y = "Count") +
custom_theme
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(patchwork)
# Plot observed cases and model predictions
plot11 <- ggplot() +
geom_point(data = aids, aes(x = date_proper, y = cases), alpha = 0.3,
color = "black") +
geom_line(data = prediction_data, aes(x = date_proper, y = fit_model1),
color = "blue") +
geom_ribbon(data = prediction_data, aes(x = date_proper, ymin = lower_model1,
ymax = upper_model1),
fill = "blue", alpha = 0.2) +
labs(x = "Date", y = "Cases", title = "Poisson") +
custom_theme
ggplot(aids, aes(x = fitted_nb, y = residuals_nb)) +
geom_point(alpha = 0.8, color = "black") +
geom_smooth(method = "loess", color = "red", se = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black") +
labs(x = "Fitted Values", y = "Deviance Residuals", title = "Figure 8: Negative Binomial Cubic: Deviance Residuals vs. Fitted Values") +
custom_theme
knitr::opts_chunk$set(echo = TRUE)
load("~/GitHub/university-projects/Statistical Data Modelling Projects - MTHM506/Coursework 1 - Practical Modelling Excersises and Theoretical Problems/.RData")
sample_data100<-grf(grid=grid,
cov.pars=c(sigma2,phi),
cov.model="matern",
kappa=1.5,
nsim=100)
library(geoR)
library(ggplot2)
library(viridis)
sample_data100<-grf(grid=grid,
cov.pars=c(sigma2,phi),
cov.model="matern",
kappa=1.5,
nsim=100)
x1 <- seq(from = 0, to = 10, by = 1)
x2 <- seq(from = 0, to = 10, by = 1)
grid <- expand.grid(x = x1,y=x2)
set.seed(5474832)
sigma2<-5 #variance5
phi<-1 #somecorrelationlength
sample_data <- grf(grid=grid,
cov.pars=c(sigma2,phi),
cov.model="matern",
kappa=1.5)
lim <- 8
image(sample_data, col=viridis(100), zlim=c(-lim,lim))
x1<-seq(from=0,to=10,by=0.5)
x2<-seq(from=0,to=10,by=0.5)
grid<-expand.grid(x1,x2)
sample_data<-grf(grid=grid,
cov.pars=c(sigma2,phi),
cov.model="matern",
kappa=1.5)
image(sample_data,col=viridis(100),zlim=c(-lim,lim))
sample_data100<-grf(grid=grid,
cov.pars=c(sigma2,phi),
cov.model="matern",
kappa=1.5,
nsim=100)
par(mfrow=c(2,2),mar=c(4,2,2,2))
image(sample_data100,sim.number=1,col=viridis(100),zlim=c(-lim,lim),main= 'Sample1')
image(sample_data100,sim.number=2,col=viridis(100),zlim=c(-lim,lim),main= 'Sample2')
image(sample_data100,sim.number=3,col=viridis(100),zlim=c(-lim,lim),main= 'Sample3')
image(sample_data100,sim.number=100,col=viridis(100),zlim=c(-lim,lim),main= 'Sample100')
image(sample_data100,sim.number=1,col=viridis(100),zlim=c(-lim,lim),main= 'Sample11')
image(sample_data100,sim.number=2,col=viridis(100),zlim=c(-lim,lim),main= 'Sample8')
image(sample_data100,sim.number=3,col=viridis(100),zlim=c(-lim,lim),main= 'Sample5')
image(sample_data100,sim.number=100,col=viridis(100),zlim=c(-lim,lim),main= 'Sample15')
image(sample_data100,sim.number=6,col=viridis(100),zlim=c(-lim,lim),main= 'Sample5')
phi<-0.5 #somecorrelationlength
sigma2<-10 #variance5
sample_data100<-grf(grid=grid,
cov.pars=c(sigma2,phi),
cov.model="matern",
kappa=1.5,
nsim=100)
par(mfrow=c(2,2),mar=c(4,2,2,2))
image(sample_data100,sim.number=1,col=viridis(100),zlim=c(-lim,lim),main= 'Sample11')
image(sample_data100,sim.number=2,col=viridis(100),zlim=c(-lim,lim),main= 'Sample8')
image(sample_data100,sim.number=6,col=viridis(100),zlim=c(-lim,lim),main= 'Sample5')
image(sample_data100,sim.number=100,col=viridis(100),zlim=c(-lim,lim),main= 'Sample15')
data(parana)
par(mar=c(4,2,2,2))
plot(parana)
?mar
?par
model_ml <- likfit(parana, ini.cov.pars = c(10,1))
model_ml
model_trend <- likfit(parana, trend = '2nd', ini.cov.pars = c(10,1), cov.model = 'matern', kappa = 5/2)
model_trend
model_trend <- likfit(parana, trend = '1st', ini.cov.pars = c(10,1), cov.model = 'matern', kappa = 5/2)
model_trend
xv.ml<-xvalid(parana,model=vari.default)
?xvalid
xv.ml<-xvalid(parana,model=model_trend)
par(mfrow=c(3,2),mar=c(4,2,2,2))
plot(xv.ml,error=TRUE,std.error=FALSE,pch=19)
model_bad<-likfit(parana,fix.nugget=TRUE,ini.cov.pars=c(10,1),cov.model= 'matern',
kappa=3/2)
xv.ml<-xvalid(parana,model=model_bad)
par(mfrow=c(3,2),mar=c(4,2,2,2))
plot(xv.ml,error=TRUE,std.error=FALSE,pch=19)
pred_grid<-expand.grid(seq(100,800,by=5),seq(0,550,by=5))
#obj.modelisthemodelwewanttouseforprediction
preds<-krige.conv(parana,loc=pred_grid,
krige=krige.control(obj.model=model_ml))
image(preds,col=viridis::viridis(100),zlim=c(0,max(c(preds$predict))),
coords.data=parana[1]$coords,main= 'Mean',xlab='x',ylab= 'y',
x.leg = c(700, 900), y.leg = c(20, 70))
image(preds, values = preds$krige.var, col = heat.colors(100)[100:1],
zlim = c(0,max(c(preds$krige.var))), coords.data = parana[1]$coords,
main = 'Variance', xlab = 'x', ylab = 'y', x.leg = c(700, 900), y.leg = c(20, 70))
image(preds,col=viridis::viridis(100),zlim=c(0,max(c(preds$predict))),
coords.data=parana[1]$coords,main= 'Mean',xlab='x',ylab= 'y',
x.leg = c(700, 900), y.leg = c(20, 70))
load("C:/Users/james/Downloads/germany.rds")
germany <- readRDS(""C:/Users/james/Downloads/germany.rds"")
head(germany)
germany <- readRDS(""C:/Users/james/Downloads/germany.rds"")
germany <- readRDS("C:/Users/james/Downloads/germany.rds")
head(germany)
View(germany)
image(germany,col=viridis(100),zlim=c(-lim,lim))
str(germany)
View(germany)
summary(germany)
grid <- expand.grid(x =longitude  , y = latitude)
summary(germany)
grid <- expand.grid(x ="longitude"  , y = "latitude")
grid <- expand.grid(x =germany$longitude  , y = germany$latitude)
image(germany,col=viridis(100),zlim=c(-lim,lim))
set.seed(1234)
sigma2<-5
phi<-1
germany_data<-grf(grid=grid,
cov.pars=c(sigma2,phi),
cov.model="matern",
kappa=1.5)
lim<-8
germany_data<-grf(grid=grid,
cov.pars=c(sigma2,phi),
cov.model="matern",
kappa=1.5)
summary(germany)
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5)
germany <- as.geodata(germany, coords.col=c(\"longitude\",\"latitude\"), data.col=\"value_column\")
kappa=1.5)1
1
kappa=1.5)1+
+
germany <- readRDS("C:/Users/james/Downloads/germany.rds")
germany <- as.geodata(germany, coords.col=c(\"longitude\",\"latitude\"), data.col=\"value_column\")
set.seed(123)
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5)1+
germany <- as.geodata(germany, coords.col=c(\"longitude\",\"latitude\"), data.col=\"value_column\")
set.seed(123)
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5)
germany <-
set.seed(123)
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5)
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5)
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5)
-
-
-
<-
<-
<-
<-
<-
<-
.co
.co
germany <- readRDS("C:/Users/james/Downloads/germany.rds")
head(germany)
summary(germany)
germany <- as.geodata(germany, coords.col=c(\"longitude\",\"latitude\"), data.col=\"value_column\")
set.seed(123)
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5)
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5))
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5))
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5))
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5))
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5))
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5))
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5))
1
/no
germany <- readRDS("C:/Users/james/Downloads/germany.rds")
head(germany)
summary(germany)
germany <- as.geodata(germany, coords.col=c(\"longitude\",\"latitude\"), data.col=\"value_column\")
set.seed(123)
germany_model <- grf(n=length(germany$coords[,1]),
grid=germany$coords,
cov.pars=c(8, 1.5),
cov.model=\"matern\",
kappa=1.5))
grid_x <- seq(min(germany$coords[,1]), max(germany$coords[,1]), length=100)
grid_y <- seq(min(germany$coords[,2]), max(germany$coords[,2]), length=100)
prediction_grid <- expand.grid(x=grid_x, y=grid_x)
data(germany)
par(mar=c(4,2,2,2))
plot(germany)
data(germany)
par(mar=c(4,2,2,2))
plot(germany)
data(germany)
par(mar=c(4,2,2,2))
plot(germany)
data(germany)
par(mar=c(4,2,2,2))
plot(germany)
data(germany)
par(mar=c(4,2,2,2))
plot(germany)
germany <- readRDS("C:/Users/james/Downloads/germany.rds")
data(germany)
par(mar=c(4,2,2,2))
plot(germany)
library(geoR)
library(ggplot2)
library(viridis)
data(germany)
par(mar=c(4,2,2,2))
plot(germany)
g_vario <- variog(germany, option='bin')
par(mar=c(4,4,2,2))
plot(g_vario, pch = 19)
g_vario$n
vari.default <- variofit(g_vario)
vari.default
par(mar=c(4,4,2,2))
plot(g_vario, pch = 19)
lines(vari.default)
model_g <- likfit(germany, ini.cov.pars = c(10,1))
model_g
summary(germany)
model_g2 <- likfit(germany, trend = '2nd', ini.cov.pars = c(10,1), cov.model = 'matern', kappa = 5/2)
model_g2
xv.ml<-xvalid(germany,model=vari.default)
par(mfrow=c(3,2),mar=c(4,2,2,2))
plot(xv.ml,error=TRUE,std.error=FALSE,pch=19)
