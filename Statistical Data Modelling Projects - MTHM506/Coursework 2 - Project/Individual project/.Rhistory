# Temporal smooths across years using wrap_plots()
library(patchwork)
library(scales)
library(stringr)
# Colour scheme
year_colours <- c(
"2012" = "#D55E00",  # burnt orange
"2013" = "#0072B2",  # deep blue
"2014" = "#009E73"   # teal green
)
# Covariate labels
label_cleaner <- function(x) {
x %>% str_replace_all("_", " ") %>% str_to_title()
}
# Plot list, Using a for loop to so we cal do them all at once.
plot_list <- list()
unique_covs <- unique(filtered_df$covariate)
# Temporal smooths across years using wrap_plots()
library(patchwork)
library(scales)
library(stringr)
# Colour scheme
year_colours <- c(
"2012" = "#D55E00",  # burnt orange
"2013" = "#0072B2",  # deep blue
"2014" = "#009E73"   # teal green
)
# Covariate labels
label_cleaner <- function(x) {
x %>% str_replace_all("_", " ") %>% str_to_title()
}
library(gratia)
# Extract smooth estimates from the GAM
smooth_df <- smooth_estimates(gam_model_SP)
# Filter out spatial and illiteracy terms
filtered_df <- smooth_df %>%
filter(
!str_detect(.smooth, "Illiteracy"),
!str_detect(.smooth, "lon")
) %>%
mutate(
covariate = str_extract(.smooth, "(?<=s\\().+?(?=\\))"),   # extract covariate name
year = str_extract(.smooth, "\\d{4}")                      # extract year from label
)
# Plot list, Using a for loop to so we cal do them all at once.
plot_list <- list()
unique_covs <- unique(filtered_df$covariate)
for (cov in unique_covs) {
df_sub <- filtered_df %>% filter(covariate == cov)
p <- ggplot(df_sub, aes_string(x = cov, y = ".estimate", colour = "year")) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "grey40", linewidth = 0.4) +
scale_colour_manual(values = year_colours) +
labs(
x = label_cleaner(cov),
y = NULL
) +
theme_bw(base_size = 12) +
theme(
plot.title = element_blank(),
axis.title.x = element_text(size = 11),
axis.text = element_text(size = 10),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
legend.position = "none"
)
plot_list[[cov]] <- p
}
# Plot Layout - Shared Legend
combined_plot <- wrap_plots(plot_list, ncol = 2) +
plot_layout(guides = "collect") &
theme(
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 11),
plot.margin = margin(10, 10, 10, 10)
)
# Adding Figure Title
combined_plot +
plot_annotation(
title = "Temporal Variation in Socio-Economic Covariate Effects on TB Risk",
theme = theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
)
)
# Spatial visualisation of TB risk
plot.map <- function(x, Q, main = "", cex = 1, decimals = 2, palette = rev(hcl.colors(length(Q)-1, palette = "inferno"))) {
n.levels <- length(Q) - 1
cols <- palette  # directly use provided palette (already a vector of colours)
n <- length(x)
# Assign colours based on quantiles
col <- rep(cols[1], n)
for(i in 2:n.levels) {
col[x >= Q[i] & x < Q[i + 1]] <- cols[i]
}
col[x >= Q[n.levels + 1]] <- cols[n.levels]
# Format legend with clear control over decimal points
legend.names <- c()
for(i in 1:n.levels) {
legend.names[i] <- paste0("[", round(Q[i], decimals), ", ", round(Q[i + 1], decimals), "]")
}
# Plotting clearly
plot(brasil_micro, col = col, main = main, border = NA)
legend('bottomright', legend = legend.names, fill = cols, cex = cex, title = "TB Rate")
}
# Generate predicted TB cases from the GAM
TBdata$predicted_cases <- predict(gam_model_tw, type = "response")
# Convert to TB rate per 100,000 population
TBdata$predicted_rate <- (TBdata$predicted_cases / TBdata$Population) * 100000
# Define quantiles clearly for legend (7 levels)
quantiles <- quantile(TBdata$predicted_rate, probs = seq(0, 1, length.out = 10))
# Define inverted inferno palette explicitly
my_palette <- rev(hcl.colors(length(quantiles)-1, palette = "inferno"))
# Plot with smaller legend size clearly
plot.map(x = TBdata$predicted_rate,
Q = quantiles,
main = "Spatial Structure of Predicted TB Risk (per 100,000 population)",
cex = 1,
decimals = 2,
palette = my_palette)
# Spatial visualisation of TB risk
plot.map <- function(x, Q, main = "", cex = 1, decimals = 2, palette = rev(hcl.colors(length(Q)-1, palette = "inferno"))) {
n.levels <- length(Q) - 1
cols <- palette  # directly use provided palette (already a vector of colours)
n <- length(x)
# Assign colours based on quantiles
col <- rep(cols[1], n)
for(i in 2:n.levels) {
col[x >= Q[i] & x < Q[i + 1]] <- cols[i]
}
col[x >= Q[n.levels + 1]] <- cols[n.levels]
# Format legend with clear control over decimal points
legend.names <- c()
for(i in 1:n.levels) {
legend.names[i] <- paste0("[", round(Q[i], decimals), ", ", round(Q[i + 1], decimals), "]")
}
# Plotting clearly
plot(brasil_micro, col = col, main = main, border = NA)
legend('bottomright', legend = legend.names, fill = cols, cex = cex, title = "TB Rate")
}
# Generate predicted TB cases from the GAM
TBdata$predicted_cases <- predict(gam_model_tw, type = "response")
# Convert to TB rate per 100,000 population
TBdata$predicted_rate <- (TBdata$predicted_cases / TBdata$Population) * 100000
# Define quantiles clearly for legend (7 levels)
quantiles <- quantile(TBdata$predicted_rate, probs = seq(0, 1, length.out = 10))
# Define inverted inferno palette explicitly
my_palette <- rev(hcl.colors(length(quantiles)-1, palette = "inferno"))
# Plot with smaller legend size clearly
plot.map(x = TBdata$predicted_rate,
Q = quantiles,
main = "Spatial Structure of Predicted TB Risk (per 100,000 population)",
cex = 1,
decimals = 2,
palette = my_palette)
# Plot using ggplot
ggplot(smooth_plot_data_filtered, aes(x = x, y = fit)) +
geom_line(color = "darkblue", linewidth = 1.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_ribbon(aes(ymin = lower_CI, ymax = upper_CI), alpha = 0.3, fill = "blue") +
facet_wrap(~ Covariate, scales = "free_x", labeller = labeller(Covariate = facet_labels), nrow = 4, ncol = 2) +
labs(title = "Partial Effects of Socio-Economic Covariates on TB Risk",
subtitle = "Estimated smooth terms with 95% confidence intervals",
x = "Covariate Value",
y = "Partial Effect (log-scale)",
caption = "Positive values indicate increased risk; negative values indicate decreased risk.") +
theme_bw(base_size = 14) +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
strip.text = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 14),
panel.spacing = unit(1, "lines")
)
## Check residuals
par(mfrow=c(1,2))
# QQplot
qq.gam(gam_model_tw,pch=20)
# deviance residualsvs linearpredictor
xx <-gam_model_tw$linear.predictors
yy <-residuals(gam_model_tw,type="deviance")
14
plot(xx,yy,pch=20,xlab="Linear predictor",ylab="Deviance residuals")
abline(h=0)
# Temporal smooths across years using wrap_plots()
library(patchwork)
library(scales)
library(stringr)
# Colour scheme
year_colours <- c(
"2012" = "#D55E00",  # burnt orange
"2013" = "#0072B2",  # deep blue
"2014" = "#009E73"   # teal green
)
# Covariate labels
label_cleaner <- function(x) {
x %>% str_replace_all("_", " ") %>% str_to_title()
}
library(gratia)
# Extract smooth estimates from the GAM
smooth_df <- smooth_estimates(gam_model_SP)
# Filter out spatial and illiteracy terms
filtered_df <- smooth_df %>%
filter(
!str_detect(.smooth, "Illiteracy"),
!str_detect(.smooth, "lon")
) %>%
mutate(
covariate = str_extract(.smooth, "(?<=s\\().+?(?=\\))"),   # extract covariate name
year = str_extract(.smooth, "\\d{4}")                      # extract year from label
)
# Plot list, Using a for loop to so we cal do them all at once.
plot_list <- list()
unique_covs <- unique(filtered_df$covariate)
for (cov in unique_covs) {
df_sub <- filtered_df %>% filter(covariate == cov)
p <- ggplot(df_sub, aes_string(x = cov, y = ".estimate", colour = "year")) +
geom_line(linewidth = 1) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "grey40", linewidth = 0.4) +
scale_colour_manual(values = year_colours) +
labs(
x = label_cleaner(cov),
y = NULL
) +
theme_bw(base_size = 12) +
theme(
plot.title = element_blank(),
axis.title.x = element_text(size = 11),
axis.text = element_text(size = 10),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
legend.position = "none"
)
plot_list[[cov]] <- p
}
# Plot Layout - Shared Legend
combined_plot <- wrap_plots(plot_list, ncol = 2) +
plot_layout(guides = "collect") &
theme(
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 11),
plot.margin = margin(10, 10, 10, 10)
)
# Adding Figure Title
combined_plot +
plot_annotation(
title = "Temporal Variation in Socio-Economic Covariate Effects on TB Risk",
theme = theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
)
)
# Maps for each year
# Predicting TB rates
TBdata$predicted_cases_sp <- predict(gam_model_SP, type = "response")
# Convert to TB rate per 100,000 population
TBdata$predicted_rate_sp <- (TBdata$predicted_cases_sp / TBdata$Population) * 100000
par(mfrow = c(3, 1))  # Arrange plots side by side for comparison
years <- c("2012", "2013", "2014")
# Define common quantiles for all years to keep the scale consistent
quantiles <- quantile(TBdata$predicted_rate_sp, probs = seq(0, 1, length.out = 8), na.rm = TRUE)
# Loop through each year and plot it clearly
for (year in years) {
plot.map(
x = TBdata$predicted_rate_sp[TBdata$Year == year],  # Filter TB rates for the year
Q = quantiles,
main = paste("Predicted TB Risk (per 100,000) - Year", year),
cex = 1,
decimals = 2,
palette = my_palette  # Uses the same colour scheme for all years
)
}
# Table showing high-risk regions by fixed and dynamic thresholds
# Recreating the data, so not affect original dataset
TBdata_new <- TBdata %>%
dplyr::select(Region, Year, Indigenous, Illiteracy, Urbanisation,
Density, Poverty, Poor_Sanitation, Unemployment, Population, Timeliness, lon, lat) %>%
mutate(Predicted_TB = predict(gam_model_tw, newdata = ., type = "response"),
Predicted_TB_Scaled = (Predicted_TB / Population) * 100000)  # Scale to per 100,000 population
library(mgcv)
set.seed(123)
# Fit the Negative Binomial GAM with population offset. Base Model
TBdata$Year <- factor(TBdata$Year)
TBdata$Region <- factor(TBdata$Region)
TBdata$logPop <- log(TBdata$Population)
# Ensure categorical variables are factors
TBdata$fYear <- factor(TBdata$Year)
# First GAM model
gam_model_initial <- gam(TB ~
s(Indigenous, bs = "tp", k=10) +
s(Illiteracy, bs = "tp", k=10) +
s(Urbanisation, bs = "tp", k=10) +
s(Density, bs = "tp", k=10) +
s(Poverty, bs = "cr", k=5) +
s(Unemployment, bs = "cr", k=5) +
s(Poor_Sanitation, k = 10, bs = "cr") +
s(Timeliness, bs = "tp", k=10) +
te(lon, lat, by = Year, bs = c("tp", "cr"), k = c(20, 20, 5)) +
offset(logPop),
data = TBdata,
family = nb(link = "log"),
method = "REML")
# Used a mix of "cr" and "tp" splines. CR on the covariates with mostly linear trends, as this smooth function is better on them.
par(mfrow = c(2,2))
gam.check(gam_model_initial)
summary(gam_model_initial)
# Removing Illiteracy from future models as it inst a significant predictor.
# Indigenous edf is around 1, meaning the covariate has a linear trend. Thus a smooth function isn't needed for this.
# Spatial visualisation of TB risk
plot.map <- function(x, Q, main = "", cex = 1, decimals = 2, palette = rev(hcl.colors(length(Q)-1, palette = "inferno"))) {
n.levels <- length(Q) - 1
cols <- palette  # directly use provided palette (already a vector of colours)
n <- length(x)
# Assign colours based on quantiles
col <- rep(cols[1], n)
for(i in 2:n.levels) {
col[x >= Q[i] & x < Q[i + 1]] <- cols[i]
}
col[x >= Q[n.levels + 1]] <- cols[n.levels]
# Format legend with clear control over decimal points
legend.names <- c()
for(i in 1:n.levels) {
legend.names[i] <- paste0("[", round(Q[i], decimals), ", ", round(Q[i + 1], decimals), "]")
}
# Plotting clearly
plot(brasil_micro, col = col, main = main, border = NA)
legend('bottomright', legend = legend.names, fill = cols, cex = cex, title = "TB Rate")
}
# Generate predicted TB cases from the GAM
TBdata$predicted_cases <- predict(gam_model_tw, type = "response")
# Convert to TB rate per 100,000 population
TBdata$predicted_rate <- (TBdata$predicted_cases / TBdata$Population) * 100000
# Define quantiles clearly for legend (7 levels)
quantiles <- quantile(TBdata$predicted_rate, probs = seq(0, 1, length.out = 10))
# Define inverted inferno palette explicitly
my_palette <- rev(hcl.colors(length(quantiles)-1, palette = "inferno"))
# Plot with smaller legend size clearly
plot.map(x = TBdata$predicted_rate,
Q = quantiles,
main = "Spatial Structure of Predicted TB Risk (per 100,000 population)",
cex = 1,
decimals = 2,
palette = my_palette)
load("~/GitHub/university-projects/Statistical Data Modelling Projects - MTHM506/Coursework 2 - Project/datasets_project.RData")
TBdata <- TBdata
library(tidyverse)
library(ggplot2)
library(rmarkdown)
library(mgcv)
library(dplyr)
library(gt)
custom_theme <- theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Centered title
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 11),
panel.grid.major = element_line(color = "gray85"),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8)
)
# [Table A.1] Summary stats of covariates + TB Rate
TBdata$TB_Rate <- (TBdata$TB/TBdata$Population)*100000
# List of variables and their brief descriptions
covariate_labels <- c(
"Indigenous",
"Illiteracy",
"Urbanisation",
"Density",
"Poverty",
"Poor Sanitation",
"Unemployment",
"Timeliness",
"TB Rate"
)
# Variables for summarisation
variables <- c("Indigenous", "Illiteracy", "Urbanisation", "Density",
"Poverty", "Poor_Sanitation", "Unemployment", "Timeliness", "TB_Rate")
# Summarising with explicit naming
summary_stats <- TBdata %>%
summarise(across(all_of(variables), list(
Mean = ~mean(.x, na.rm = TRUE),
SD = ~sd(.x, na.rm = TRUE),
Min = ~min(.x, na.rm = TRUE),
Q1 = ~quantile(.x, 0.25, na.rm = TRUE),
Median = ~median(.x, na.rm = TRUE),
Q3 = ~quantile(.x, 0.75, na.rm = TRUE),
Max = ~max(.x, na.rm = TRUE)
), .names = "{.col}__{.fn}")) %>%
pivot_longer(cols = everything(),
names_to = c("Variable", "Statistic"),
names_sep = "__",
values_to = "Value") %>%
pivot_wider(names_from = Statistic, values_from = Value) %>%
mutate(Variable = covariate_labels)
# Create the professional GT table
summary_stats %>%
gt() %>%
tab_header(
title = md("**Summary Statistics of Socio-Economic Covariates and TB Rate**")
) %>%
fmt_number(columns = where(is.numeric), decimals = 2) %>%
cols_label(
Variable = "Covariate",
Mean = "Mean",
SD = "Std Dev",
Min = "Min",
Q1 = "25th Percentile",
Median = "Median",
Q3 = "75th Percentile",
Max = "Max"
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels(everything())
) %>%
tab_style(
style = list(cell_fill(color = "gray95")),
locations = cells_body(rows = Variable == "TB Rate (Cases per 100,000 population)")
) %>%
tab_options(
table.font.names = "Times New Roman",
table.font.size = 13,  # Slightly larger text for better readability
heading.align = "center",
column_labels.font.size = 13,  # Increase column header size
column_labels.font.weight = "bold",
row.striping.include_table_body = TRUE,
data_row.padding = px(10),  # Increase row padding for more height
column_labels.border.top.width = px(3),
column_labels.border.bottom.width = px(3),
table.border.top.width = px(2),
table.border.bottom.width = px(2),
table.border.bottom.color = "black",
table.border.top.color = "black",
table.width = pct(100)
) %>%
tab_caption("Table 1: Summary Statistics of Socio-Economic Covariates and TB Rate")
# [Table A.1] Summary stats of covariates + TB Rate
TBdata$TB_Rate <- (TBdata$TB/TBdata$Population)*100000
# List of variables and their brief descriptions
covariate_labels <- c(
"Indigenous",
"Illiteracy",
"Urbanisation",
"Density",
"Poverty",
"Poor Sanitation",
"Unemployment",
"Timeliness",
"TB Rate"
)
# Variables for summarisation
variables <- c("Indigenous", "Illiteracy", "Urbanisation", "Density",
"Poverty", "Poor_Sanitation", "Unemployment", "Timeliness", "TB_Rate")
# Summarising with explicit naming
summary_stats <- TBdata %>%
summarise(across(all_of(variables), list(
Mean = ~mean(.x, na.rm = TRUE),
SD = ~sd(.x, na.rm = TRUE),
Min = ~min(.x, na.rm = TRUE),
Q1 = ~quantile(.x, 0.25, na.rm = TRUE),
Median = ~median(.x, na.rm = TRUE),
Q3 = ~quantile(.x, 0.75, na.rm = TRUE),
Max = ~max(.x, na.rm = TRUE)
), .names = "{.col}__{.fn}")) %>%
pivot_longer(cols = everything(),
names_to = c("Variable", "Statistic"),
names_sep = "__",
values_to = "Value") %>%
pivot_wider(names_from = Statistic, values_from = Value) %>%
mutate(Variable = covariate_labels)
# Create the professional GT table
summary_stats %>%
gt() %>%
tab_header(
title = md("**Summary Statistics of Socio-Economic Covariates and TB Rate**")
) %>%
fmt_number(columns = where(is.numeric), decimals = 2) %>%
cols_label(
Variable = "Covariate",
Mean = "Mean",
SD = "Std Dev",
Min = "Min",
Q1 = "25th Percentile",
Median = "Median",
Q3 = "75th Percentile",
Max = "Max"
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_column_labels(everything())
) %>%
tab_style(
style = list(cell_fill(color = "gray95")),
locations = cells_body(rows = Variable == "TB Rate (Cases per 100,000 population)")
) %>%
tab_options(
table.font.names = "Times New Roman",
table.font.size = 13,  # Slightly larger text for better readability
heading.align = "center",
column_labels.font.size = 13,  # Increase column header size
column_labels.font.weight = "bold",
row.striping.include_table_body = TRUE,
data_row.padding = px(10),  # Increase row padding for more height
column_labels.border.top.width = px(3),
column_labels.border.bottom.width = px(3),
table.border.top.width = px(2),
table.border.bottom.width = px(2),
table.border.bottom.color = "black",
table.border.top.color = "black",
table.width = pct(100)
) %>%
tab_caption("Table 1: Summary Statistics of Socio-Economic Covariates and TB Rate")
