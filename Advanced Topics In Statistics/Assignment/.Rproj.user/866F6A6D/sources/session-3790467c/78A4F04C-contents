---
title: "**MTHM017 - Advanced Topics in Statistics, Assignment**"
author: "**James R Lewis**"
date: "**00-00-2025**"
output:
  pdf_document:
    latex_engine: xelatex
    extra_dependencies: ["amsmath", "amssymb", "mathtools", "bm", "booktabs", "caption", "hyperref", "fancyvrb"]
    includes:
      in_header: preamble.tex
    toc: true
    toc_depth: 2
    number_sections: false
  html_document:
    css: style.css
  word_document: default
header-includes:
  - \usepackage{fontspec}
  - \setmainfont{Latin Modern Roman}
  - \defaultfontfeatures{Ligatures=TeX}
  - \usepackage{amsmath}
  - \usepackage{amssymb}
  - \usepackage{mathtools}
  - \usepackage{bm}
  - \usepackage{geometry}
  - \geometry{a4paper, margin=1in}
  - \usepackage{setspace}
  - \usepackage{fancyvrb}
  - \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\small, baselinestretch=0.7}
  - \onehalfspacing
classoption: a4paper,11pt
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r loading datasets and libraries, include=FALSE}
rtimes <- read.csv("~/GitHub/university-projects/Advanced Topics In Statistics/Assignment/rtimes.csv")

ClassificationTrue <- read.csv("~/GitHub/university-projects/Advanced Topics In Statistics/Assignment/ClassificationTrue.csv")

Classification <- read.csv("~/GitHub/university-projects/Advanced Topics In Statistics/Assignment/Classification.csv")

library(tidyverse)
library(ggplot2)
library(rmarkdown)
library(stargazer)

```

**Declaration of AI Assistance**: I have used OpenAI’s ChatGPT tool in creating this report.

AI-supported/AI-integrated use is permitted in this assessment. I acknowledge the following uses of GenAI tools in this assessment:

1.  I have used GenAI tools to check and debug my code.
2.  I have used GenAI tools to proofread and correct grammar or spelling errors.
3.  I have used GenAI tools to give me feedback on a draft.

I declare that I have referenced use of GenAI outputs within my assessment in line with the University referencing guidelines.

```{r setting plot theme, include = FALSE}
custom_theme <- theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Centered title
    axis.title = element_text(face = "bold", size = 12),
    axis.text = element_text(size = 11), 
    panel.grid.major = element_line(color = "gray85"),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8)
  )
```

\newpage

# A. Bayesian Inference

## 1.

[6 marks] Read in the data, then for each person produce a histogram of that given person’s reaction times. The range of the x axis should be the same on each histogram. Visually compare the reaction time distributions of schizophrenic and non-schizophrenic individuals. What differences/similarities can you observe? Reference the histograms of specific individuals to support your conclusions.

I will begin by making the dataset more usable and clear.

```{r, data wrangling rtimes, include=TRUE}
# Renaming first column
names(rtimes)[1] <- "PatientType"
# Classifying the patient type, 1-11 non-schiz, 12-17 schiz
rtimes$PatientType <- c(rep("non-schizophrenic", 11), rep("schizophrenic", 6))
rtimes1 <- rtimes
head(rtimes1)
```

### Creating Histograms

We want to extract the data from these columns **rtimes[, 2:31]**, for all 17 patients. We will plot 17 histograms, displaying the distribution of the 30 reaction times.

In order to keep a consistent range across the 17 histograms, we need to find the absolute minimum and maximum values in this dataset. To do this, we extract all the data, 17 rows \* 30 trials.

```{r extracting data points, include = TRUE}
DataValues <- unlist(rtimes1[, 2:31])
range(DataValues)

# We want to store these values

x_min <- 204
x_max <- 1714
```

Below, we can observe two sets of histograms, the first containing the eleven non-schizophrenic patients, and the seconds containing the 6 schizophrenic patients.

We reshape to data frame to long format, as having the reaction time data in one column (a list) makes much easier to code the histogram. To create a separate plot for each patient, we use facet_wrap() to group data by PatientID.

```{r histo format, include=TRUE}
# Reshaping to long format
rtimes_long <- rtimes1 %>%
  pivot_longer(cols = starts_with("T"),  # Columns T1 to T30
               names_to = "Trial", 
               values_to = "ReactionTime") %>%
  mutate(PatientID = rep(1:17, each = 30)) %>%  # Add patientID
  select(PatientID, PatientType, ReactionTime)

# Splitting into two datasets so I can have seperate histogramws
non_schizo <- rtimes_long %>% filter(PatientType == "non-schizophrenic") 
schizo <- rtimes_long %>% filter(PatientType == "schizophrenic")          
```

```{r histograms, fig.width=7, fig.height=5, fig.align="center", include=TRUE}
# Plotting non-schizophrenic histograms
hist1 <- ggplot(non_schizo, aes(x = ReactionTime)) +
  geom_histogram(binwidth = 150, fill = "dodgerblue1", color = "black") +
  facet_wrap(~ PatientID, ncol = 4, scales = "free_y") +  # 11 plots, 4 columns
  coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
  labs(title = "Figure 1: Non-Schizophrenic Reaction Times", 
       x = "Reaction Time (ms)", 
       y = "Count") +
  custom_theme

# Plotting schizophrenic histograms
hist2 <- ggplot(schizo, aes(x = ReactionTime)) +
  geom_histogram(binwidth = 150, fill = "sienna2", color = "black") +
  facet_wrap(~ PatientID, ncol = 3, scales = "free_y") +  # 6 plots, 3 columns
  coord_cartesian(xlim = c(x_min, x_max)) +  # Fixed x-axis
  labs(title = "Figure 2: Schizophrenic Reaction Times", 
       x = "Reaction Time (ms)", 
       y = "Count") +
  custom_theme
```

```{r histograms print, fig.width=7, fig.height=5, fig.align="center", echo=FALSE}
print(hist1)
print(hist2)
```

In Figure 1 we can see that Non-schizophrenic patients such as patient 1 have a narrower and concentrated histogram, with reaction times completely clustered around the second bin (150-300ms). For example, every Non-schizophrenic patient's results show that at least two thirds of their reaction times were faster than 300ms.

In contrast, the Schizophrenic patients histograms in Figure 2 exhibit a much wider spread of reaction times, with some patients having reactions times exceeding 1500ms. This indicates greater variability, for instance, patient 14 has a wide range of reaction times with many being greater than 1000ms, whilst also having a significant count below 500ms. This suggests that Schizophrenic patients have a mixture of normal and delayed responses, and this aligns with the theory of attention deficits and motor retardation in schizophrenics. This is generally observed by their inconsistent distributions and right skew, compared to the tighter uniform distributions of non-schizophrenics

Nonetheless, both groups share similarities in their distributions. They both have peaks within the first two bins 0-500ms, as you can see when comparing patient 8 (non) to 13 (schizophrenic). However, only schizophrenics have reaction time values in the higher bands (greater than 800ms)

Overall, these histograms support the hypothesis that schizophrenics experience attention deficits and motor reflex retardation, as seen by the wider spread of values and more irregular histograms for schizophrenic individuals.

## 2. [5 marks] The above model uses the logarithm of measured reaction times. Explain why taking the

logarithm is necessary here (referencing the relevant output), then perform the transformation yourself. For each person compute the standard deviation of the log transformed reaction times of that individual.

-Calculate standard deviations: For each of the 17 people, compute the standard deviation of their 30 log-transformed reaction times.

Log-transforming the reaction times is necessary for the model above for two main reasons. Firstly, there is skewness in the data as seen in the Schizophrenic reaction times histograms, for example, Patient 14 and 15 are right-skewed distributions with extreme values (over 1500ms), whilst non-schizophrenic's have a tighter distribution. Following this, schizophrenics don't seems to follow a normal distribution, thus, log transforming reduces the skewness and helps stabilise the variance from the effect of outliers/skew. This enambles the data to fit the models normal distributions assumption better. Finally, the log-transformation scales the data, making the mean and variance more interpretable. For example, the original range of 204ms to 1714ms, becomes 5.31 to 7.44 (3 s.f.) when log-transformed. Put simply, handling smaller numbers is easier.

```{r log transforming, include=TRUE}
log_rtimes_long <- rtimes_long %>%
  mutate(LogReactionTime = log(ReactionTime))
range(log_rtimes_long$LogReactionTime) 
# checking the range also lets us knowif any observations are negative.
```

Now we compute the standard deviation of each patients 30 log-transformed reaction times. This is useful as it measures the within personal variability on the log scale.

```{r sd log, include = TRUE}
# Compute standard deviation of log-transformed reaction times for each person
sd_log <- log_rtimes_long %>%
  group_by(PatientID) %>%
  summarise(SD_Log_RT = sd(LogReactionTime))

# Print results
head(sd_log)
```

## 3. [5 marks] List the parameters of the model and assign non-informative uniform prior distributions to each parameter, paying attention to the values these parameters are allowed take.

The reason we are using non-informative uniform prior distributions is because we lack prior knowledge about the parameters. Thus, having a reasonable range of values that are equally likely gives a non-bias estimation and allows the data to strong influence the posterior distribution.

**Parameters and Priors:**

## **For Non-Schizophrenic Individuals:**

-   $\alpha_i$ (for $i = 1$ to 17): Person-specific means on the log scale.

```{r echo=TRUE, results = "hide"}
alpha[i] ~ dunif(0, 10)
```

------------------------------------------------------------------------

-   $\mu$: Mean of $\alpha_i$ for non-schizophrenics, which represents the mean log reaction time. with most values between 200ms and 1800ms), when log transformed they equal, 5.3 and 7.5.. A wide range of -10 - 10 to avoid bias and cover potential outliers.

```{r echo=TRUE, results = "hide"}
mu ~ dunif(-10, 10)
```

-   (\sigma\_y\^2): Varience of log-reaction times.

```{r echo=TRUE, results = "hide"}
sigma_y2 ~ dunif(0, 5)
# tau_y <- 1 / sigma_y2 
```

-   (\sigma\_\alpha\^2): Varience of $\alpha_i$.

```{r echo=TRUE, results = "hide"}
sigma_alpha2 ~ dunif(0, 5)
# tau_alpha <- 1 / sigma_alpha2

```

**For Schizophrenic Individuals:**

-   $\beta$: Additional variable in $\alpha_i$ mean for schizophrenics, which represents the increase in reaction time due to schizophrenia. Although we expect schizophrenics to be slower, there is still the possibility of motor retardation having no difference, or faster reactions (unlikely, but possible). A range of -10 - 10 is wide enough for the data to determine the direction.

```{r echo=TRUE, results = "hide"}
beta ~ dunif(0, 10)
```

-   $\tau$: Log-transformed delay parameter for schizophrenics ($\tau > 0$). This is a wide range, but remains uninformative and is contrained to positive values.

```{r echo=TRUE, results = "hide"}
tau ~ dunif(0, 10)
```

-   $\lambda$: Probability of delay ($0 \leq \lambda \leq 1$). Value must lie between 0 and 1, as $\lambda$ is a probability.

```{r echo=TRUE, results = "hide"}
lambda ~ dunif(0, 1)
```

## 4.

```{r, include = FALSE}
 library(R2jags)
 library(coda)
 library(lattice)
 library(MCMCvis)
 library(tidyverse)
```

First we need to create a data matrix which JAGS can process. We extracting the raw reaction times in the original wide format, and then Log-transforming them. After this, we can create our data list for our JAGS model. Defining separate matrixs for Schizophrenic and non-Schizophrenic reaction times, the number of patients in each group, and the number of trials. It is important to define these now, as we call upon them in the model definition.

```{r, setting up data, include=TRUE}
extractedRtimes <- rtimes[, 2:31] 
log_rtimes <- log(extractedRtimes)

data_list <- list(
  y.ns = log_rtimes[1:11, ],  # Non-schizophrenic reaction times (11 x 30)
  y.s = log_rtimes[12:17, ],  # Schizophrenic reaction times (6 x 30)
  N_ns = 11,                  # Number of non-schizophrenics
  N_s = 6,                    # Number of schizophrenics
  T = 30                      # Number of trials
)

```
### **Model Specification**

Now we define the hierarchical Bayesian model. The model is account for the two groups of patients, their individual variability.

**Reaction times for Non-Schizophrenic patients (N.S)** ($i$th individual) are modeled as:

($i = 1, 2, \ldots, 11$) $$y_{ij} \sim N(\alpha_i, \sigma_y^2), \quad i = 1, 2, \ldots, 11, \quad j = 1, 2, \ldots, 30$$ Where: 

- $y^{ns}_{ij}$ is the **reaction time** for individual $i$ and trial $j$ - $\alpha_i$ is individual specific **mean** reaction time - $\sigma_y^2$ is the shared **varience** across all trials.

Individuals **mean** ($\alpha_i$) reaction time is: $$\alpha_i \sim N(\mu, \sigma_\alpha^2), \quad i = 1, 2, \ldots, 11$$ - $\mu$ is the mean reaction time for N.S - $\sigma_\alpha^2$ is the intragroup variance in reaction times

**Reaction times for Schizophrenic patients (S)**

$$y_{ij} \sim N(\alpha_i + \tau z_{ij}, \sigma_y^2) \quad i = 12, 13, \ldots, 17, \quad j = 1, 2, \ldots, 30$$ Where: 

- $\tau$ is the extra delay 
- $\z_{ij}$ is an indicator (one or zero)

$$z_{ij} \sim \text{Bernoulli}(\lambda), \quad i = 12, 13, \ldots, 17, \quad j = 1, 2, \ldots, 30$$ Schizophrenic patients can have delayed responses due to attention deficit. This is modeled through the above Bernoulli distributed indicator function. $\lambda$ is the probability of a trial being delayed.

Schizophrenics mean reaction time: $$\alpha_i \sim N(\mu + \beta, \sigma_\alpha^2), \quad i = 12, 13, \ldots, 17$$ Where: 

- $\beta$ is the increase in mean reaction time for S

### **Defining the JAGS Model**

```{r jags model, include=TRUE}
jags.model <- function(){
    # Reaction time of non-schizophrenics
    for (i in 1:N_ns){
        for (j in 1:T) {
            y.ns[i,j] ~ dnorm(alpha.ns[i], p.y)
        }
        alpha.ns[i] ~ dnorm(mu, p.alpha)
    }

    # Reaction time of schizophrenics
     for (i in 1:N_s){
        for (j in 1:T) {
            z[i,j] ~ dbern(lambda)  # Bernoulli for delay indicator
            y.s[i,j] ~ dnorm(alpha.s[i] + tau * z[i,j], p.y) # Corrected indexing
        }
        alpha.s[i] ~ dnorm(mu + beta, p.alpha)
    }
  
    # Priors
    mu ~ dunif(-10, 10) # Mean for non-schizophrenics
    sigma_y2 ~ dunif(0.001, 5) # Avoiding exact 0 for stability
    sigma_alpha2 ~ dunif(0.001, 5) # Avoiding exact 0 for stability
    beta ~ dunif(0, 10) # Schizophrenics should have longer reaction times
    tau ~ dunif(0, 10) # Delay parameter
    lambda ~ dunif(0, 1) # Probability of delay
  
    # Precision parameters
    p.y <- 1 / sigma_y2   
    p.alpha <- 1 / sigma_alpha2
}


```

### **Defining the Parameters, what we what to track, and initial values**

```{r inits, include=TRUE}
 jags.param <- c("mu", "beta", "tau", "lambda", "p.y", "p.alpha", "alpha.ns", "alpha.s", "sigma_y2")


inits1 <- list(
    mu = 4, beta = 1, tau = 1, lambda = 0.5, 
    sigma_y2 = 1, sigma_alpha2 = 1, 
    z = matrix(0, nrow = 6, ncol = 30)
)  
inits2 <- list(
    mu = 6, beta = 4, tau = 5, lambda = 0.3, 
    sigma_y2 = 2, sigma_alpha2 = 2, 
    z = matrix(0, nrow = 6, ncol = 30)
)  
jags.inits <- list(inits1, inits2)

```
Explain the thought process behind picking these initial values


### **Fitting the JAGS Model**

In the first JAGS model, we are running two MCMC chains, with 10000 iterations and discarding the first 5000 iterations to view the convergence. We are also computing the Deviance Information Criterion (DIC), so we can compare this model to future ones later.

```{r fitting jags1, include=TRUE}
 jags.mod.fit <- jags(data = data_list, inits = jags.inits,
  parameters.to.save = jags.param, n.chains = 2, n.iter = 10000,
  n.burnin = 5000, n.thin = 1 , model.file = jags.model, DIC = TRUE)
```

## 5. Monte Carlo Marcov Chain

```{r}
jagsfit.mcmc <- as.mcmc(jags.mod.fit)
 MCMCtrace(jagsfit.mcmc,type = 'trace',ind = TRUE, pdf = FALSE)
```

We can see from the trace plots above, that the chains have converged and look like "fuzzy caterpillars". The alpha.s and alpha.ns (mean reaction time for both groups), seem to have converged for every individual, with values ranging from 5.6 to 5.75 (log transformed mean reaction time) for non-schizophrenics, and 5.9 to 6.3 for schizophrenics.

To check for convergence more accurately, we can extract the Gelman-Rubin test statistic values. This is in the code below.

```{r}
gelman.diag(jagsfit.mcmc,multivariate=FALSE)
```

As you can see above, the value of all the upper confidence intervals are 1 or very close to 1 (1.01, 1.02). This indicates convergence. If a value was above 1.1, this would suggest a lack of convergence.

Interestingly, looking at the traceplots for alpha.s[4] (Upper CI of 1.01) and lambda (Upper CI of 1.01), their traceplots look slightly less concentrated and dense around the center, indicating that they aren't as strongly converged as the other nodes.

Since chains have converged, there is no need to update the model to draw new samples.

## 6. **Posterior Distributions**

[10 marks] The primary interest to psychologists lies in the parameters β, λ and τ. Plot the posterior distributions of these three parameters, then produce numerical summaries of the distributions. Check if you have enough samples for posterior inference. Remembering that the response time was modeled on the log scale (and therefore both τ and β are on the log scale), give the median and a 95% posterior interval for each of these parameters on their original scale. Based on these estimates what conclusions can you make about the reaction times of schizophrenics compared to non-schizophrenics?

### Plots

```{r post distri, fig.width=7, fig.height=5, fig.align="center", include=TRUE}
library(MCMCvis)


MCMCtrace(jagsfit.mcmc,
          params = c("beta", "lambda", "mu"),
          type = "density",
          ind = TRUE,        
          pdf = FALSE,         
          main_den = c("Posterior Distribution of β (log scale)", 
                       "Posterior Distribution of λ (Probability of Delay)", 
                       "Posterior Distribution of μ (log scale)"),
          col_den = c("blue", "darkred", "purple"))
```

Next, we check to summary statistics.

```{r, include=TRUE, results='hide'}
print(jags.mod.fit$BUGSoutput$summary[c("beta", "lambda", "mu"), ])
```
The n.eff statistics in the table above is the effective sample size indicator, if the value is above 1000, it indicates that you have enough samples to check the posterior distribution. When under this amount, it can mean your parameters haven't reached convergence. In our case, we can confidently assume that our model has plenty of samples past the point of convergence as shown by the n.eff values of 6000, 1300, 5100, thus our posterior distributions are accurate.

Now we extract the relevant statistics for Beta, Lamba and Tau. It is important to note that Beta and Tau have been in log scale up until this point, so by multiplying them by exponential, we return them to their true values.
This can be seen in the code below.

### Beta

```{r}
pos_beta<-substr(rownames(jags.mod.fit$BUGSoutput$summary),1,4)=='beta'

# Extract posterior mean for mu
beta_mean<-jags.mod.fit$BUGSoutput$summary[pos_beta,1]
# Extract posterior median
beta_median<-jags.mod.fit$BUGSoutput$summary[pos_beta,5]

# Extract 2.5 percentile of the posterior
beta2.5 <- jags.mod.fit$BUGSoutput$summary[pos_beta,3]
# Extract97.5percentileoftheposterior
beta97.5 <- jags.mod.fit$BUGSoutput$summary[pos_beta,7]
```

### Lambda

```{r}
pos_lambda <- substr(rownames(jags.mod.fit$BUGSoutput$summary), 1, 6) == "lambda"
lambda_mean <- jags.mod.fit$BUGSoutput$summary[pos_lambda, 1]
lambda_median <- jags.mod.fit$BUGSoutput$summary[pos_lambda, 5]
lambda2.5 <- jags.mod.fit$BUGSoutput$summary[pos_lambda,3]
lambda97.5 <- jags.mod.fit$BUGSoutput$summary[pos_lambda,7]

```

### Tau

```{r}
pos_tau <- substr(rownames(jags.mod.fit$BUGSoutput$summary), 1, 3) == "tau"
tau_mean <- jags.mod.fit$BUGSoutput$summary[pos_tau, 1]
tau_median <- jags.mod.fit$BUGSoutput$summary[pos_tau, 5]
tau2.5 <- jags.mod.fit$BUGSoutput$summary[pos_tau,3]
tau97.5 <- jags.mod.fit$BUGSoutput$summary[pos_tau,7]
```

We add the summary statistics to a dataframe.

```{r}
df_stats <- data.frame(
  Parameter = c("Beta", "Lambda", "Tau"),
  Median = c(exp(beta_median), lambda_median, exp(tau_median)),
  Lower_95_CI = c(exp(beta2.5), lambda2.5, exp(tau2.5)),
  Upper_95_CI = c(exp(beta97.5), lambda97.5, exp(tau97.5))
)
```

```{r stargazer table 1, echo=FALSE}
stargazer(df_stats, type = "text", summary = FALSE, title = "Reaction Time Parameters", digits = 3 )
```
